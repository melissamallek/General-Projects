{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:24.136049Z",
     "iopub.status.busy": "2021-04-02T17:55:24.135358Z",
     "iopub.status.idle": "2021-04-02T17:55:24.138856Z",
     "shell.execute_reply": "2021-04-02T17:55:24.138230Z"
    },
    "papermill": {
     "duration": 0.072133,
     "end_time": "2021-04-02T17:55:24.139059",
     "exception": false,
     "start_time": "2021-04-02T17:55:24.066926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "# import numpy as np # linear algebra\n",
    "# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# import tensorflow as tf # model building\n",
    "\n",
    "# # Input data files are available in the read-only \"../input/\" directory\n",
    "# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "# import os\n",
    "# for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#     for filename in filenames:\n",
    "#         print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:24.270148Z",
     "iopub.status.busy": "2021-04-02T17:55:24.269485Z",
     "iopub.status.idle": "2021-04-02T17:55:25.778418Z",
     "shell.execute_reply": "2021-04-02T17:55:25.778938Z"
    },
    "papermill": {
     "duration": 1.578308,
     "end_time": "2021-04-02T17:55:25.779111",
     "exception": false,
     "start_time": "2021-04-02T17:55:24.200803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# Data wrangling libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import missingno\n",
    "from collections import Counter\n",
    "\n",
    "# Data visualization libraries\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Machine learning libraries\n",
    "from sklearn.linear_model import LogisticRegression, Perceptron, SGDClassifier\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "from catboost import CatBoostClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Remove warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:25.912997Z",
     "iopub.status.busy": "2021-04-02T17:55:25.912353Z",
     "iopub.status.idle": "2021-04-02T17:55:25.953709Z",
     "shell.execute_reply": "2021-04-02T17:55:25.954323Z"
    },
    "papermill": {
     "duration": 0.113038,
     "end_time": "2021-04-02T17:55:25.954515",
     "exception": false,
     "start_time": "2021-04-02T17:55:25.841477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df = pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "test_df = pd.read_csv('/kaggle/input/titanic/test.csv')\n",
    "gender_df = pd.read_csv('/kaggle/input/titanic/gender_submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:26.083446Z",
     "iopub.status.busy": "2021-04-02T17:55:26.082664Z",
     "iopub.status.idle": "2021-04-02T17:55:26.131862Z",
     "shell.execute_reply": "2021-04-02T17:55:26.132378Z"
    },
    "papermill": {
     "duration": 0.115004,
     "end_time": "2021-04-02T17:55:26.132549",
     "exception": false,
     "start_time": "2021-04-02T17:55:26.017545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:26.262884Z",
     "iopub.status.busy": "2021-04-02T17:55:26.262194Z",
     "iopub.status.idle": "2021-04-02T17:55:26.288244Z",
     "shell.execute_reply": "2021-04-02T17:55:26.288775Z"
    },
    "papermill": {
     "duration": 0.092568,
     "end_time": "2021-04-02T17:55:26.288958",
     "exception": false,
     "start_time": "2021-04-02T17:55:26.196390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>332.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>417.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>2.265550</td>\n",
       "      <td>30.272590</td>\n",
       "      <td>0.447368</td>\n",
       "      <td>0.392344</td>\n",
       "      <td>35.627188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>120.810458</td>\n",
       "      <td>0.841838</td>\n",
       "      <td>14.181209</td>\n",
       "      <td>0.896760</td>\n",
       "      <td>0.981429</td>\n",
       "      <td>55.907576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>892.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.170000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>996.250000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.895800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1204.750000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId      Pclass         Age       SibSp       Parch        Fare\n",
       "count   418.000000  418.000000  332.000000  418.000000  418.000000  417.000000\n",
       "mean   1100.500000    2.265550   30.272590    0.447368    0.392344   35.627188\n",
       "std     120.810458    0.841838   14.181209    0.896760    0.981429   55.907576\n",
       "min     892.000000    1.000000    0.170000    0.000000    0.000000    0.000000\n",
       "25%     996.250000    1.000000   21.000000    0.000000    0.000000    7.895800\n",
       "50%    1100.500000    3.000000   27.000000    0.000000    0.000000   14.454200\n",
       "75%    1204.750000    3.000000   39.000000    1.000000    0.000000   31.500000\n",
       "max    1309.000000    3.000000   76.000000    8.000000    9.000000  512.329200"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:26.434297Z",
     "iopub.status.busy": "2021-04-02T17:55:26.422519Z",
     "iopub.status.idle": "2021-04-02T17:55:26.438350Z",
     "shell.execute_reply": "2021-04-02T17:55:26.438874Z"
    },
    "papermill": {
     "duration": 0.086158,
     "end_time": "2021-04-02T17:55:26.439056",
     "exception": false,
     "start_time": "2021-04-02T17:55:26.352898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:26.572394Z",
     "iopub.status.busy": "2021-04-02T17:55:26.571446Z",
     "iopub.status.idle": "2021-04-02T17:55:26.587497Z",
     "shell.execute_reply": "2021-04-02T17:55:26.587951Z"
    },
    "papermill": {
     "duration": 0.084362,
     "end_time": "2021-04-02T17:55:26.588128",
     "exception": false,
     "start_time": "2021-04-02T17:55:26.503766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:26.725346Z",
     "iopub.status.busy": "2021-04-02T17:55:26.724403Z",
     "iopub.status.idle": "2021-04-02T17:55:26.732984Z",
     "shell.execute_reply": "2021-04-02T17:55:26.733545Z"
    },
    "papermill": {
     "duration": 0.079008,
     "end_time": "2021-04-02T17:55:26.733731",
     "exception": false,
     "start_time": "2021-04-02T17:55:26.654723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived\n",
       "0          892         0\n",
       "1          893         1\n",
       "2          894         0\n",
       "3          895         0\n",
       "4          896         1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gender_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:26.869001Z",
     "iopub.status.busy": "2021-04-02T17:55:26.868379Z",
     "iopub.status.idle": "2021-04-02T17:55:26.875348Z",
     "shell.execute_reply": "2021-04-02T17:55:26.875865Z"
    },
    "papermill": {
     "duration": 0.07609,
     "end_time": "2021-04-02T17:55:26.876036",
     "exception": false,
     "start_time": "2021-04-02T17:55:26.799946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set shape:  (891, 12)\n",
      "Test set shape:  (418, 11)\n",
      "Gender example submission set shape:  (418, 2)\n"
     ]
    }
   ],
   "source": [
    "# Examine shape of datasets\n",
    "\n",
    "print(\"Training set shape: \", train_df.shape)\n",
    "print(\"Test set shape: \", test_df.shape)\n",
    "print(\"Gender example submission set shape: \", gender_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:27.017188Z",
     "iopub.status.busy": "2021-04-02T17:55:27.016170Z",
     "iopub.status.idle": "2021-04-02T17:55:27.044149Z",
     "shell.execute_reply": "2021-04-02T17:55:27.045080Z"
    },
    "papermill": {
     "duration": 0.098384,
     "end_time": "2021-04-02T17:55:27.045506",
     "exception": false,
     "start_time": "2021-04-02T17:55:26.947122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n",
      "---------------------------------------------\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  418 non-null    int64  \n",
      " 1   Pclass       418 non-null    int64  \n",
      " 2   Name         418 non-null    object \n",
      " 3   Sex          418 non-null    object \n",
      " 4   Age          332 non-null    float64\n",
      " 5   SibSp        418 non-null    int64  \n",
      " 6   Parch        418 non-null    int64  \n",
      " 7   Ticket       418 non-null    object \n",
      " 8   Fare         417 non-null    float64\n",
      " 9   Cabin        91 non-null     object \n",
      " 10  Embarked     418 non-null    object \n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 36.0+ KB\n"
     ]
    }
   ],
   "source": [
    "# View datatypes of different columns and determine amount of NaN values\n",
    "\n",
    "train_df.info()\n",
    "print('-'*45)\n",
    "test_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:27.185871Z",
     "iopub.status.busy": "2021-04-02T17:55:27.185067Z",
     "iopub.status.idle": "2021-04-02T17:55:27.193179Z",
     "shell.execute_reply": "2021-04-02T17:55:27.193761Z"
    },
    "papermill": {
     "duration": 0.07963,
     "end_time": "2021-04-02T17:55:27.193943",
     "exception": false,
     "start_time": "2021-04-02T17:55:27.114313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cabin          687\n",
       "Age            177\n",
       "Embarked         2\n",
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Missing values per column in training dataset\n",
    "\n",
    "train_df.isnull().sum().sort_values(ascending = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:27.333408Z",
     "iopub.status.busy": "2021-04-02T17:55:27.332758Z",
     "iopub.status.idle": "2021-04-02T17:55:27.340407Z",
     "shell.execute_reply": "2021-04-02T17:55:27.340891Z"
    },
    "papermill": {
     "duration": 0.079214,
     "end_time": "2021-04-02T17:55:27.341099",
     "exception": false,
     "start_time": "2021-04-02T17:55:27.261885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cabin          327\n",
       "Age             86\n",
       "Fare             1\n",
       "PassengerId      0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Missing values per column in test dataset\n",
    "\n",
    "test_df.isnull().sum().sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:27.482984Z",
     "iopub.status.busy": "2021-04-02T17:55:27.482239Z",
     "iopub.status.idle": "2021-04-02T17:55:27.936784Z",
     "shell.execute_reply": "2021-04-02T17:55:27.937323Z"
    },
    "papermill": {
     "duration": 0.527933,
     "end_time": "2021-04-02T17:55:27.937506",
     "exception": false,
     "start_time": "2021-04-02T17:55:27.409573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize missing data in training set\n",
    "\n",
    "missingno.matrix(train_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:28.103867Z",
     "iopub.status.busy": "2021-04-02T17:55:28.102839Z",
     "iopub.status.idle": "2021-04-02T17:55:28.486470Z",
     "shell.execute_reply": "2021-04-02T17:55:28.487000Z"
    },
    "papermill": {
     "duration": 0.464502,
     "end_time": "2021-04-02T17:55:28.487176",
     "exception": false,
     "start_time": "2021-04-02T17:55:28.022674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1800x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize missing data in test set\n",
    "missingno.matrix(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:28.639138Z",
     "iopub.status.busy": "2021-04-02T17:55:28.638425Z",
     "iopub.status.idle": "2021-04-02T17:55:28.642317Z",
     "shell.execute_reply": "2021-04-02T17:55:28.641613Z"
    },
    "papermill": {
     "duration": 0.082771,
     "end_time": "2021-04-02T17:55:28.642470",
     "exception": false,
     "start_time": "2021-04-02T17:55:28.559699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "male      577\n",
       "female    314\n",
       "Name: Sex, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine gender counts\n",
    "\n",
    "train_df['Sex'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:28.802071Z",
     "iopub.status.busy": "2021-04-02T17:55:28.796091Z",
     "iopub.status.idle": "2021-04-02T17:55:28.806570Z",
     "shell.execute_reply": "2021-04-02T17:55:28.805904Z"
    },
    "papermill": {
     "duration": 0.091409,
     "end_time": "2021-04-02T17:55:28.806715",
     "exception": false,
     "start_time": "2021-04-02T17:55:28.715306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>female</td>\n",
       "      <td>0.742038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>male</td>\n",
       "      <td>0.188908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  Survived\n",
       "0  female  0.742038\n",
       "1    male  0.188908"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average survival rate based on sex\n",
    "\n",
    "train_df[['Sex', 'Survived']].groupby('Sex', as_index = False).mean().sort_values(by = 'Survived', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:28.961608Z",
     "iopub.status.busy": "2021-04-02T17:55:28.960212Z",
     "iopub.status.idle": "2021-04-02T17:55:29.178979Z",
     "shell.execute_reply": "2021-04-02T17:55:29.178381Z"
    },
    "papermill": {
     "duration": 0.299148,
     "end_time": "2021-04-02T17:55:29.179123",
     "exception": false,
     "start_time": "2021-04-02T17:55:28.879975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survival Probability by Gender')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize survival rate based on sex -- females survive at a much higher rate\n",
    "\n",
    "sns.barplot(x = 'Sex', y ='Survived', data = train_df)\n",
    "plt.ylabel('Survival Probability')\n",
    "plt.title('Survival Probability by Gender')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:29.336667Z",
     "iopub.status.busy": "2021-04-02T17:55:29.335627Z",
     "iopub.status.idle": "2021-04-02T17:55:29.340251Z",
     "shell.execute_reply": "2021-04-02T17:55:29.339654Z"
    },
    "papermill": {
     "duration": 0.087386,
     "end_time": "2021-04-02T17:55:29.340423",
     "exception": false,
     "start_time": "2021-04-02T17:55:29.253037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    491\n",
       "1    216\n",
       "2    184\n",
       "Name: Pclass, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine value counts of the Pclass column \n",
    "\n",
    "train_df['Pclass'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:29.493237Z",
     "iopub.status.busy": "2021-04-02T17:55:29.492308Z",
     "iopub.status.idle": "2021-04-02T17:55:29.509029Z",
     "shell.execute_reply": "2021-04-02T17:55:29.509615Z"
    },
    "papermill": {
     "duration": 0.094847,
     "end_time": "2021-04-02T17:55:29.509803",
     "exception": false,
     "start_time": "2021-04-02T17:55:29.414956",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.629630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.472826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.242363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pclass  Survived\n",
       "0       1  0.629630\n",
       "1       2  0.472826\n",
       "2       3  0.242363"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average survival rate based on Pclass\n",
    "\n",
    "train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:29.664233Z",
     "iopub.status.busy": "2021-04-02T17:55:29.663308Z",
     "iopub.status.idle": "2021-04-02T17:55:29.910559Z",
     "shell.execute_reply": "2021-04-02T17:55:29.909906Z"
    },
    "papermill": {
     "duration": 0.325604,
     "end_time": "2021-04-02T17:55:29.910701",
     "exception": false,
     "start_time": "2021-04-02T17:55:29.585097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survival Probability by Pclass')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization of survival rate based on Pclass - the lower the class, the more likely you are not to survive\n",
    "\n",
    "sns.barplot(x = 'Pclass', y ='Survived', data = train_df)\n",
    "plt.ylabel('Survival Probability')\n",
    "plt.title('Survival Probability by Pclass')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:30.071553Z",
     "iopub.status.busy": "2021-04-02T17:55:30.070898Z",
     "iopub.status.idle": "2021-04-02T17:55:30.074964Z",
     "shell.execute_reply": "2021-04-02T17:55:30.074461Z"
    },
    "papermill": {
     "duration": 0.088055,
     "end_time": "2021-04-02T17:55:30.075104",
     "exception": false,
     "start_time": "2021-04-02T17:55:29.987049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S      644\n",
       "C      168\n",
       "Q       77\n",
       "NaN      2\n",
       "Name: Embarked, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine value counts of Embarked column\n",
    "\n",
    "train_df['Embarked'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:30.239236Z",
     "iopub.status.busy": "2021-04-02T17:55:30.237462Z",
     "iopub.status.idle": "2021-04-02T17:55:30.246129Z",
     "shell.execute_reply": "2021-04-02T17:55:30.246676Z"
    },
    "papermill": {
     "duration": 0.094493,
     "end_time": "2021-04-02T17:55:30.246850",
     "exception": false,
     "start_time": "2021-04-02T17:55:30.152357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C</td>\n",
       "      <td>0.553571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Q</td>\n",
       "      <td>0.389610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>S</td>\n",
       "      <td>0.336957</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Embarked  Survived\n",
       "0        C  0.553571\n",
       "1        Q  0.389610\n",
       "2        S  0.336957"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average survival rate based on Embarked value \n",
    "\n",
    "train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:30.405071Z",
     "iopub.status.busy": "2021-04-02T17:55:30.404014Z",
     "iopub.status.idle": "2021-04-02T17:55:30.642715Z",
     "shell.execute_reply": "2021-04-02T17:55:30.643160Z"
    },
    "papermill": {
     "duration": 0.319286,
     "end_time": "2021-04-02T17:55:30.643361",
     "exception": false,
     "start_time": "2021-04-02T17:55:30.324075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survival Probability by Embarked')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization of average survival rate based on Embarked value\n",
    "\n",
    "sns.barplot(x = 'Embarked', y = 'Survived', data = train_df)\n",
    "plt.ylabel('Survival Probability')\n",
    "plt.title('Survival Probability by Embarked')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:30.805157Z",
     "iopub.status.busy": "2021-04-02T17:55:30.804492Z",
     "iopub.status.idle": "2021-04-02T17:55:31.254490Z",
     "shell.execute_reply": "2021-04-02T17:55:31.255043Z"
    },
    "papermill": {
     "duration": 0.53354,
     "end_time": "2021-04-02T17:55:31.255250",
     "exception": false,
     "start_time": "2021-04-02T17:55:30.721710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f85389fd810>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare Pclass with areas that passengers Embarked from\n",
    "\n",
    "sns.factorplot('Pclass', col = 'Embarked', data = train_df, kind = 'count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:31.419061Z",
     "iopub.status.busy": "2021-04-02T17:55:31.418398Z",
     "iopub.status.idle": "2021-04-02T17:55:31.468432Z",
     "shell.execute_reply": "2021-04-02T17:55:31.467903Z"
    },
    "papermill": {
     "duration": 0.133098,
     "end_time": "2021-04-02T17:55:31.468583",
     "exception": false,
     "start_time": "2021-04-02T17:55:31.335485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We will drop these 10 indices:  [27, 88, 159, 180, 201, 324, 341, 792, 846, 863]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Mr. Charles Alexander</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.00</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>89</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Miss. Mabel Helen</td>\n",
       "      <td>female</td>\n",
       "      <td>23.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.00</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>160</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Master. Thomas Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>181</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Miss. Constance Gladys</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>202</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Mr. Frederick</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>324</th>\n",
       "      <td>325</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Mr. George John Jr</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>341</th>\n",
       "      <td>342</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Miss. Alice Elizabeth</td>\n",
       "      <td>female</td>\n",
       "      <td>24.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.00</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792</th>\n",
       "      <td>793</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Miss. Stella Anna</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>846</th>\n",
       "      <td>847</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Mr. Douglas Bullen</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>864</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Miss. Dorothy Edith \"Dolly\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                               Name     Sex  \\\n",
       "27            28         0       1     Fortune, Mr. Charles Alexander    male   \n",
       "88            89         1       1         Fortune, Miss. Mabel Helen  female   \n",
       "159          160         0       3         Sage, Master. Thomas Henry    male   \n",
       "180          181         0       3       Sage, Miss. Constance Gladys  female   \n",
       "201          202         0       3                Sage, Mr. Frederick    male   \n",
       "324          325         0       3           Sage, Mr. George John Jr    male   \n",
       "341          342         1       1     Fortune, Miss. Alice Elizabeth  female   \n",
       "792          793         0       3            Sage, Miss. Stella Anna  female   \n",
       "846          847         0       3           Sage, Mr. Douglas Bullen    male   \n",
       "863          864         0       3  Sage, Miss. Dorothy Edith \"Dolly\"  female   \n",
       "\n",
       "      Age  SibSp  Parch    Ticket    Fare        Cabin Embarked  \n",
       "27   19.0      3      2     19950  263.00  C23 C25 C27        S  \n",
       "88   23.0      3      2     19950  263.00  C23 C25 C27        S  \n",
       "159   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
       "180   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
       "201   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
       "324   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
       "341  24.0      3      2     19950  263.00  C23 C25 C27        S  \n",
       "792   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
       "846   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
       "863   NaN      8      2  CA. 2343   69.55          NaN        S  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def detect_outliers(df, n, features):\n",
    "    \"\"\"\"\n",
    "    This function will loop through a list of features and detect outliers in each one of those features. In each\n",
    "    loop, a data point is deemed an outlier if it is less than the first quartile minus the outlier step or exceeds\n",
    "    third quartile plus the outlier step. The outlier step is defined as 1.5 times the interquartile range. Once the \n",
    "    outliers have been determined for one feature, their indices will be stored in a list before proceeding to the next\n",
    "    feature and the process repeats until the very last feature is completed. Finally, using the list with outlier \n",
    "    indices, we will count the frequencies of the index numbers and return them if their frequency exceeds n times.    \n",
    "    \"\"\"\n",
    "    outlier_indices = [] \n",
    "    for col in features: \n",
    "        Q1 = np.percentile(df[col], 25)\n",
    "        Q3 = np.percentile(df[col], 75)\n",
    "        IQR = Q3 - Q1\n",
    "        outlier_step = 1.5 * IQR \n",
    "        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step)].index\n",
    "        outlier_indices.extend(outlier_list_col) \n",
    "    outlier_indices = Counter(outlier_indices)\n",
    "    multiple_outliers = list(key for key, value in outlier_indices.items() if value > n) \n",
    "    return multiple_outliers\n",
    "\n",
    "outliers_to_drop = detect_outliers(train_df, 2, ['Age', 'SibSp', 'Parch', 'Fare'])\n",
    "print(\"We will drop these {} indices: \".format(len(outliers_to_drop)), outliers_to_drop)\n",
    "\n",
    "train_df.loc[outliers_to_drop, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:31.636600Z",
     "iopub.status.busy": "2021-04-02T17:55:31.635967Z",
     "iopub.status.idle": "2021-04-02T17:55:31.640865Z",
     "shell.execute_reply": "2021-04-02T17:55:31.641350Z"
    },
    "papermill": {
     "duration": 0.092069,
     "end_time": "2021-04-02T17:55:31.641526",
     "exception": false,
     "start_time": "2021-04-02T17:55:31.549457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before: 891 rows\n",
      "After: 881 rows\n"
     ]
    }
   ],
   "source": [
    "# Drop the outliers and confirm this\n",
    "\n",
    "print(\"Before: {} rows\".format(len(train_df)))\n",
    "train_df = train_df.drop(outliers_to_drop, axis = 0).reset_index(drop = True)\n",
    "print(\"After: {} rows\".format(len(train_df)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:31.808081Z",
     "iopub.status.busy": "2021-04-02T17:55:31.807149Z",
     "iopub.status.idle": "2021-04-02T17:55:31.815562Z",
     "shell.execute_reply": "2021-04-02T17:55:31.814843Z"
    },
    "papermill": {
     "duration": 0.093081,
     "end_time": "2021-04-02T17:55:31.815718",
     "exception": false,
     "start_time": "2021-04-02T17:55:31.722637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    608\n",
       "1    209\n",
       "2     28\n",
       "4     18\n",
       "3     13\n",
       "5      5\n",
       "Name: SibSp, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine value counts of SibSp column (number of siblings or spouses on board)\n",
    "\n",
    "train_df['SibSp'].value_counts(dropna = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:31.998118Z",
     "iopub.status.busy": "2021-04-02T17:55:31.997037Z",
     "iopub.status.idle": "2021-04-02T17:55:32.002147Z",
     "shell.execute_reply": "2021-04-02T17:55:32.001616Z"
    },
    "papermill": {
     "duration": 0.102932,
     "end_time": "2021-04-02T17:55:32.002306",
     "exception": false,
     "start_time": "2021-04-02T17:55:31.899374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.535885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.464286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.345395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.153846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SibSp  Survived\n",
       "1      1  0.535885\n",
       "2      2  0.464286\n",
       "0      0  0.345395\n",
       "4      4  0.166667\n",
       "3      3  0.153846\n",
       "5      5  0.000000"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Determine average survival rate based on SibSp values\n",
    "\n",
    "train_df[['SibSp', 'Survived']].groupby('SibSp', as_index = False).mean().sort_values(by = 'Survived', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:32.174450Z",
     "iopub.status.busy": "2021-04-02T17:55:32.172634Z",
     "iopub.status.idle": "2021-04-02T17:55:32.532709Z",
     "shell.execute_reply": "2021-04-02T17:55:32.532129Z"
    },
    "papermill": {
     "duration": 0.448739,
     "end_time": "2021-04-02T17:55:32.532871",
     "exception": false,
     "start_time": "2021-04-02T17:55:32.084132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survival Probability by SibSp')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x = 'SibSp', y = 'Survived', data = train_df)\n",
    "plt.ylabel('Survival Probability')\n",
    "plt.title('Survival Probability by SibSp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:32.707609Z",
     "iopub.status.busy": "2021-04-02T17:55:32.706927Z",
     "iopub.status.idle": "2021-04-02T17:55:32.711299Z",
     "shell.execute_reply": "2021-04-02T17:55:32.710640Z"
    },
    "papermill": {
     "duration": 0.094479,
     "end_time": "2021-04-02T17:55:32.711448",
     "exception": false,
     "start_time": "2021-04-02T17:55:32.616969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    678\n",
       "1    118\n",
       "2     70\n",
       "3      5\n",
       "5      5\n",
       "4      4\n",
       "6      1\n",
       "Name: Parch, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine values of Parch column (number of parents/children on board)\n",
    "\n",
    "train_df['Parch'].value_counts(dropna = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:32.895587Z",
     "iopub.status.busy": "2021-04-02T17:55:32.894524Z",
     "iopub.status.idle": "2021-04-02T17:55:32.898932Z",
     "shell.execute_reply": "2021-04-02T17:55:32.898439Z"
    },
    "papermill": {
     "duration": 0.103249,
     "end_time": "2021-04-02T17:55:32.899077",
     "exception": false,
     "start_time": "2021-04-02T17:55:32.795828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Parch</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.550847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.542857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.343658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Parch  Survived\n",
       "3      3  0.600000\n",
       "1      1  0.550847\n",
       "2      2  0.542857\n",
       "0      0  0.343658\n",
       "5      5  0.200000\n",
       "4      4  0.000000\n",
       "6      6  0.000000"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average survival rate based on Parch values\n",
    "\n",
    "train_df[['Parch', 'Survived']].groupby('Parch', as_index = False).mean().sort_values(by = 'Survived', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:33.084966Z",
     "iopub.status.busy": "2021-04-02T17:55:33.076979Z",
     "iopub.status.idle": "2021-04-02T17:55:33.439245Z",
     "shell.execute_reply": "2021-04-02T17:55:33.439742Z"
    },
    "papermill": {
     "duration": 0.454709,
     "end_time": "2021-04-02T17:55:33.439931",
     "exception": false,
     "start_time": "2021-04-02T17:55:32.985222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survival Probability by Parch')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize survival rate based on Parch values\n",
    "\n",
    "sns.barplot(x = 'Parch', y = 'Survived', data = train_df)\n",
    "plt.ylabel('Survival Probability')\n",
    "plt.title('Survival Probability by Parch')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:33.634564Z",
     "iopub.status.busy": "2021-04-02T17:55:33.617733Z",
     "iopub.status.idle": "2021-04-02T17:55:33.877734Z",
     "shell.execute_reply": "2021-04-02T17:55:33.877016Z"
    },
    "papermill": {
     "duration": 0.351656,
     "end_time": "2021-04-02T17:55:33.877896",
     "exception": false,
     "start_time": "2021-04-02T17:55:33.526240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Passenger Age Distribution')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize age distribution of passengers\n",
    "\n",
    "sns.distplot(train_df['Age'], label = 'Skewness: %.2f'%(train_df['Age'].skew()))\n",
    "plt.legend(loc = 'best')\n",
    "plt.title('Passenger Age Distribution')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:34.179200Z",
     "iopub.status.busy": "2021-04-02T17:55:34.178151Z",
     "iopub.status.idle": "2021-04-02T17:55:34.579685Z",
     "shell.execute_reply": "2021-04-02T17:55:34.578939Z"
    },
    "papermill": {
     "duration": 0.61286,
     "end_time": "2021-04-02T17:55:34.579841",
     "exception": false,
     "start_time": "2021-04-02T17:55:33.966981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f8536355c10>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize age distribution by survival\n",
    "\n",
    "g = sns.FacetGrid(train_df, col = 'Survived')\n",
    "g.map(sns.distplot, 'Age')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:34.796196Z",
     "iopub.status.busy": "2021-04-02T17:55:34.788287Z",
     "iopub.status.idle": "2021-04-02T17:55:34.981073Z",
     "shell.execute_reply": "2021-04-02T17:55:34.980404Z"
    },
    "papermill": {
     "duration": 0.311051,
     "end_time": "2021-04-02T17:55:34.981216",
     "exception": false,
     "start_time": "2021-04-02T17:55:34.670165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f85341ca790>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.kdeplot(train_df['Age'][train_df['Survived'] == 0], label = 'Did not survive')\n",
    "sns.kdeplot(train_df['Age'][train_df['Survived'] == 1], label = 'Survived')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Density')\n",
    "plt.title('Passenger Age Distribution by Survival')\n",
    "plt.legend(loc = 'best')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:35.183542Z",
     "iopub.status.busy": "2021-04-02T17:55:35.167043Z",
     "iopub.status.idle": "2021-04-02T17:55:35.478929Z",
     "shell.execute_reply": "2021-04-02T17:55:35.478397Z"
    },
    "papermill": {
     "duration": 0.407576,
     "end_time": "2021-04-02T17:55:35.479071",
     "exception": false,
     "start_time": "2021-04-02T17:55:35.071495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Fare Distribution of Passengers')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize fare distribution of passengers\n",
    "\n",
    "sns.distplot(train_df['Fare'], label = 'Skewness: %.2f'%(train_df['Fare'].skew()))\n",
    "plt.legend(loc = 'best')\n",
    "plt.title('Fare Distribution of Passengers')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:35.670116Z",
     "iopub.status.busy": "2021-04-02T17:55:35.669477Z",
     "iopub.status.idle": "2021-04-02T17:55:35.674345Z",
     "shell.execute_reply": "2021-04-02T17:55:35.673762Z"
    },
    "papermill": {
     "duration": 0.104132,
     "end_time": "2021-04-02T17:55:35.674490",
     "exception": false,
     "start_time": "2021-04-02T17:55:35.570358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NaN        680\n",
       "G6           4\n",
       "B96 B98      4\n",
       "E101         3\n",
       "D            3\n",
       "          ... \n",
       "E34          1\n",
       "B3           1\n",
       "E17          1\n",
       "C54          1\n",
       "B101         1\n",
       "Name: Cabin, Length: 148, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine value counts of Cabin column\n",
    "\n",
    "train_df['Cabin'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:35.865768Z",
     "iopub.status.busy": "2021-04-02T17:55:35.863340Z",
     "iopub.status.idle": "2021-04-02T17:55:35.870534Z",
     "shell.execute_reply": "2021-04-02T17:55:35.869888Z"
    },
    "papermill": {
     "duration": 0.104321,
     "end_time": "2021-04-02T17:55:35.870676",
     "exception": false,
     "start_time": "2021-04-02T17:55:35.766355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "347082               7\n",
       "1601                 7\n",
       "3101295              6\n",
       "347088               6\n",
       "CA 2144              6\n",
       "                    ..\n",
       "111427               1\n",
       "36864                1\n",
       "248723               1\n",
       "STON/O 2. 3101274    1\n",
       "315090               1\n",
       "Name: Ticket, Length: 680, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine value counts of Ticket column\n",
    "\n",
    "train_df['Ticket'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:36.067657Z",
     "iopub.status.busy": "2021-04-02T17:55:36.066979Z",
     "iopub.status.idle": "2021-04-02T17:55:36.071246Z",
     "shell.execute_reply": "2021-04-02T17:55:36.070685Z"
    },
    "papermill": {
     "duration": 0.104376,
     "end_time": "2021-04-02T17:55:36.071415",
     "exception": false,
     "start_time": "2021-04-02T17:55:35.967039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Drop Cabin and Ticket columns from dataset (no major or obvious significance in these columns)\n",
    "\n",
    "train_df = train_df.drop(['Cabin', 'Ticket'], axis = 1)\n",
    "test_df = test_df.drop(['Cabin', 'Ticket'], axis = 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:36.264923Z",
     "iopub.status.busy": "2021-04-02T17:55:36.264169Z",
     "iopub.status.idle": "2021-04-02T17:55:36.267999Z",
     "shell.execute_reply": "2021-04-02T17:55:36.267426Z"
    },
    "papermill": {
     "duration": 0.104311,
     "end_time": "2021-04-02T17:55:36.268155",
     "exception": false,
     "start_time": "2021-04-02T17:55:36.163844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age            170\n",
       "Embarked         2\n",
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Fare             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine missing values count in training set\n",
    "\n",
    "train_df.isnull().sum().sort_values(ascending = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:36.458898Z",
     "iopub.status.busy": "2021-04-02T17:55:36.458228Z",
     "iopub.status.idle": "2021-04-02T17:55:36.463807Z",
     "shell.execute_reply": "2021-04-02T17:55:36.464303Z"
    },
    "papermill": {
     "duration": 0.102503,
     "end_time": "2021-04-02T17:55:36.464472",
     "exception": false,
     "start_time": "2021-04-02T17:55:36.361969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fill in missing values of Embarked column (use most common value)\n",
    "\n",
    "mode = train_df['Embarked'].dropna().mode()[0]\n",
    "\n",
    "train_df['Embarked'].fillna(mode, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:36.652469Z",
     "iopub.status.busy": "2021-04-02T17:55:36.651851Z",
     "iopub.status.idle": "2021-04-02T17:55:36.659279Z",
     "shell.execute_reply": "2021-04-02T17:55:36.659804Z"
    },
    "papermill": {
     "duration": 0.103036,
     "end_time": "2021-04-02T17:55:36.659966",
     "exception": false,
     "start_time": "2021-04-02T17:55:36.556930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age            86\n",
       "Fare            1\n",
       "PassengerId     0\n",
       "Pclass          0\n",
       "Name            0\n",
       "Sex             0\n",
       "SibSp           0\n",
       "Parch           0\n",
       "Embarked        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine missing values in test set\n",
    "\n",
    "test_df.isnull().sum().sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:36.850386Z",
     "iopub.status.busy": "2021-04-02T17:55:36.849702Z",
     "iopub.status.idle": "2021-04-02T17:55:36.855937Z",
     "shell.execute_reply": "2021-04-02T17:55:36.855182Z"
    },
    "papermill": {
     "duration": 0.103391,
     "end_time": "2021-04-02T17:55:36.856080",
     "exception": false,
     "start_time": "2021-04-02T17:55:36.752689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fill in missing value of Fare (use the median value)\n",
    "\n",
    "median = test_df['Fare'].dropna().median()\n",
    "test_df['Fare'].fillna(median, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:37.053465Z",
     "iopub.status.busy": "2021-04-02T17:55:37.050038Z",
     "iopub.status.idle": "2021-04-02T17:55:37.057505Z",
     "shell.execute_reply": "2021-04-02T17:55:37.058058Z"
    },
    "papermill": {
     "duration": 0.107931,
     "end_time": "2021-04-02T17:55:37.058224",
     "exception": false,
     "start_time": "2021-04-02T17:55:36.950293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age            86\n",
       "PassengerId     0\n",
       "Pclass          0\n",
       "Name            0\n",
       "Sex             0\n",
       "SibSp           0\n",
       "Parch           0\n",
       "Fare            0\n",
       "Embarked        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.isnull().sum().sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:37.251444Z",
     "iopub.status.busy": "2021-04-02T17:55:37.250469Z",
     "iopub.status.idle": "2021-04-02T17:55:37.271073Z",
     "shell.execute_reply": "2021-04-02T17:55:37.271737Z"
    },
    "papermill": {
     "duration": 0.118465,
     "end_time": "2021-04-02T17:55:37.271909",
     "exception": false,
     "start_time": "2021-04-02T17:55:37.153444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1       0.0       3   \n",
       "1            2       1.0       1   \n",
       "2            3       1.0       3   \n",
       "3            4       1.0       1   \n",
       "4            5       0.0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch     Fare Embarked  \n",
       "0      0   7.2500        S  \n",
       "1      0  71.2833        C  \n",
       "2      0   7.9250        S  \n",
       "3      0  53.1000        S  \n",
       "4      0   8.0500        S  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combine data in training and test sets\n",
    "\n",
    "combine = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)\n",
    "combine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:37.463944Z",
     "iopub.status.busy": "2021-04-02T17:55:37.463309Z",
     "iopub.status.idle": "2021-04-02T17:55:37.472356Z",
     "shell.execute_reply": "2021-04-02T17:55:37.472935Z"
    },
    "papermill": {
     "duration": 0.107078,
     "end_time": "2021-04-02T17:55:37.473100",
     "exception": false,
     "start_time": "2021-04-02T17:55:37.366022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived       418\n",
       "Age            256\n",
       "PassengerId      0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Fare             0\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine missing values in combined dataset \n",
    "# (we can ignore the Survived column as this will be from test set)\n",
    "\n",
    "combine.isnull().sum().sort_values(ascending = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:37.666190Z",
     "iopub.status.busy": "2021-04-02T17:55:37.665551Z",
     "iopub.status.idle": "2021-04-02T17:55:37.671089Z",
     "shell.execute_reply": "2021-04-02T17:55:37.671698Z"
    },
    "papermill": {
     "duration": 0.103871,
     "end_time": "2021-04-02T17:55:37.671882",
     "exception": false,
     "start_time": "2021-04-02T17:55:37.568011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert Sex categorical values to numerical values -- 0 = male, 1 = female\n",
    "\n",
    "combine['Sex'] = combine['Sex'].map({'male' : 0, 'female': 1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:37.865814Z",
     "iopub.status.busy": "2021-04-02T17:55:37.865189Z",
     "iopub.status.idle": "2021-04-02T17:55:38.913152Z",
     "shell.execute_reply": "2021-04-02T17:55:38.912327Z"
    },
    "papermill": {
     "duration": 1.146393,
     "end_time": "2021-04-02T17:55:38.913371",
     "exception": false,
     "start_time": "2021-04-02T17:55:37.766978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f853635fe50>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZsAAAFuCAYAAABXx7VSAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAAActklEQVR4nO3dfZBddZ3n8fe3k5CA0eEhIWTSZHBMZAYpxbHLh0FncWIwzLIDxSwqO+v21LImVjlmdN1aGWYZcXVn2Npda2zGshIflt5dxhFRixTFU8wMIq4LhOcnZzo6GBtCHkCEQBMS8t0/7m0MMUnfDvfX557T71dV6vY5fc7vfgm5/enfOb/z+0VmIklSSX1VFyBJaj7DRpJUnGEjSSrOsJEkFWfYSJKKm1l1AZ1YsWJF3nDDDVWXIUlViqoLeCVq0bPZsWNH1SVIkl6BWoSNJKneDBtJUnGGjSSpOMNGklScYSNJKs6wkSQVZ9hIkoozbCRJxRk2kqTiDBtJUnFFwyYiPh4RD0bEAxHxtYiYExHHRsT6iBhpvx5TsgZJUvWKhU1ELAJWAwOZeSowA/gAcBGwITOXAhva25KkBis96/NM4MiI2A0cBTwG/ClwRvv7w8DNwCcL19GRoaEhNm3aNOFxo6OjAPT393fU7pIlS1i9evUrqk2S6qxYzyYzHwX+O7AZ2AL8PDNvAhZk5pb2MVuA4w90fkSsjIiNEbFx+/btpco8LGNjY4yNjVVdhiTVRmRmmYZb92K+CbwfeAr4BnA18NeZefQ+x/0sMw9532ZgYCA3btxYpM7DMd5LGRoaqrgSSdOI69kcxHuAf8rM7Zm5G/gW8NvA1ohYCNB+3VawBklSDygZNpuBt0fEURERwDLgYWAdMNg+ZhC4pmANkqQeUGyAQGbeFhFXA3cBe4C7gbXAXOCqiLiQViCdX6oGSVJvKDoaLTM/BXxqv927aPVyJEnThDMISJKKM2wkScUZNpKk4gwbSVJxho0kqTjDRpJUnGEjSSrOsJEkFVd6iQFJk+AyF2oqw0aqIZe4UN0YNlIP6bT34TIXqhvv2UiSijNs1DN27NjBRz/6UZ544omqS5HUZYaNesbw8DD33Xcfw8PDVZciqcsMG/WEHTt2cP3115OZXH/99fZupIYxbNQThoeHyUwA9u7da+9GahjDRj1h/fr17N69G4Ddu3dz0003VVyRpG4ybNQTli9fzqxZswCYNWsWZ555ZsUVSeomw0Y9YXBwkIgAoK+vj8HBwYorktRNho16wrx58zjrrLOICM466yyOO+64qkuS1EXOIKCeMTg4yCOPPGKvRmogw0Y9Y968eVx++eVVlyGpAC+jSZKKM2wkScUZNpKk4gwb9Qwn4pSay7BRz3AiTqm5ioVNRJwcEffs8+fpiPhYRBwbEesjYqT9ekypGlSf3oITcUrNVixsMvMfMvO0zDwNeAvwHPBt4CJgQ2YuBTa0t1VIXXoLTsQpNdtUXUZbBvwoM38CnAOM/yQZBs6dohqmnTr1FpyIU2q2qQqbDwBfa3+9IDO3ALRfj5+iGqadOvUWnIhTarbiYRMRRwC/D3xjkuetjIiNEbFx+/btZYpruDr1FpyIU2q2qejZnAXclZlb29tbI2IhQPt124FOysy1mTmQmQPz58+fgjKbp069BSfilJptKsLmAn5xCQ1gHTD+a+sgcM0U1DAt1a23MDg4yBvf+Maer1PS5BUNm4g4ClgOfGuf3ZcByyNipP29y0rWMJ3VrbcwPhFnr9cpafKKzvqcmc8Bx+237wlao9M0BZy2X1IvcImBhnPafkm9wOlqJEnFGTaSpOIMG0lScYaNJKk4w6bh6jLrs6RmM2wari6zPktqNsOmweo067OkZjNsGqxOsz5LajbDpsHqNOszeH9JajLDpsHqNOszeH9JajLDpsHqNOuz95ekZjNsGqxOsz57f0lqNsOm4eqyRkzd7i9JmhzDpuHqskZM3e4vSZocw0Y9oU73lyRNnmHTcHUZTlyn+0tqrrp8XurIsGm4Og0nrsv9JTVXnT4vdWPYNFjdhhPX5f6Smqlun5e6MWwazOHEUuf8vJRl2DSYw4mlzvl5KcuwaTCHE0ud8/NSlmHTYA4nljrn56WsmVUXoMMzNDTEpk2bJjxu/MMzd+5cPv3pT094/JIlS1i9evUrrk+qm/Hh9+vWrXP4fQH2bBqur6+Pvr4+TjjhhKpLmZDPOKhqDr8vx55NTXXa+xg/bmhoqGQ5XbFmzRruvfde1qxZw8UXX1x1OZqGxoffq/vs2agn7Nixg/Xr1wNw00032buRGsawUU9Ys2YNe/fuBVrPOKxZs6biitQtXh4VFA6biDg6Iq6OiB9GxMMR8Y6IODYi1kfESPv1mJI1qB6+853vvGx7vJej+nMKGEH5ns3ngRsy8zeANwEPAxcBGzJzKbChva1pbnzU3MG2VU9OAaNxxcImIl4D/A7wFYDMfCEznwLOAcZ/xRkGzi1Vg+pj2bJlL9t+z3veU1El6iangNG4kj2bXwe2A/8zIu6OiC9HxKuABZm5BaD9evyBTo6IlRGxMSI2bt++vWCZ6gWrVq2ir6/1z7Gvr49Vq1ZVXJG6wSlgNK5k2MwEfgv4Yma+GXiWSVwyy8y1mTmQmQPz588vVaN6xLx581i0aBEAixYt8oG6hnAKGI0rGTajwGhm3tbevppW+GyNiIUA7ddtBWtQTezYsYPHH38cgK1bt3ptvyGcAkbjioVNZj4O/DQiTm7vWgY8BKwDxv/FDQLXlKpB9bHvtfzM9Np+Q7gCq8aVHo32UeDKiLgPOA34C+AyYHlEjADL29ua5ry231xOASMoPF1NZt4DDBzgW8sOsE/T2PLly7nuuuvYvXu31/YbxilgBM4goB7htX2p2Qwb9QSv7TeX09UIDBv1EK/tN5PT1QgMG/WQ8Wv79mqaw+lqNM6wkVSM09VonGEjqRiHtGucYSOpGKer0TjDRj3DUUvN45B2jTNs1DMctdQ8DmnXOMNGPcFRS83lkHaBYaMe4ail5nJIu8CwUY9w1JLUbEUn4pQ65USc9TM0NMSmTZsmPG50dBSA/v7+jtpdsmQJq1evfkW1qffYs1FPcNRSc42NjTE2NlZ1GaqYPRv1hPFRS+vWrXPUUk102vsYP25oaKhkOepxho16xuDgII888oi9GqmBDBv1DBfZkprLezaSpOIMG0lScYaNJKk4w0aSVJxhI0kqzrCRJBVn2Khn3H777ZxxxhnceeedVZciqcsMG/WMSy+9lL1793LJJZdUXYqkLjNs1BNuv/12du7cCcDOnTvt3UgNY9ioJ1x66aUv27Z3IzWLYaOeMN6rOdi2pHorGjYR8UhE3B8R90TExva+YyNifUSMtF+PKVmD6mHu3LmH3JZUb1PRs3l3Zp6WmQPt7YuADZm5FNjQ3tY0t/9ltM985jPVFCKpiCpmfT4HOKP99TBwM/DJUm/W6WqCkzEyMgJ0vp7HZDRxlcLJ/j/o6+tjeHiY4eHhQx7XxL8rqalKh00CN0VEAmsycy2wIDO3AGTmlog4/kAnRsRKYCXA4sWLD7uATZs2cff9D7H3qGMPu439xQsJwJ0/erxrbQL0PfdkV9urm9mzZ7Nr1y5OOumkqkuR1GWlw+b0zHysHSjrI+KHnZ7YDqa1AAMDA/lKith71LE8f8rZr6SJKTHnoWurLqEIV3SUVPSeTWY+1n7dBnwbeCuwNSIWArRft5WsQZJUvWJhExGviohXj38NnAk8AKwDxtf9HQSuKVWDJKk3lLyMtgD4dkSMv8/fZOYNEXEHcFVEXAhsBs4vWIMkqQcUC5vM/DHwpgPsfwJYVup9JUm9p4qhz9K0Uqfh900dTt7p/4PR0VEA+vv7O2q3qX9fJRg2UmF1GX4/3YfeA4yNjVVdQmMZNtIUqMPw+6YOvQeH3/cCJ+KUJBVn2EiSijNsJEnFGTaSpOIMG0lScYaNJKk4w0aSVJxhI0kqzrCRJBVn2EiSijNsJEnFGTaSpOIMG0lScYaNJKk4w0aSVJxhI0kqzrCRpAaIiBcj4p6IeCAivhERRx3i2Esj4j9MZX2GjSQ1w1hmnpaZpwIvAB+uuqB9GTaS1DzfA5YARMS/iYj7IuLeiPjf+x8YER+KiDva3//meI8oIs5v95LujYhb2vveEBG3t3tQ90XE0k4Lmtml/7CeNTo6St9zP6/F+up9zz3B6OieqsuQVGMRMRM4C7ghIt4A/BlwembuiIhjD3DKtzLzS+1zPwtcCFwO/Dnw3sx8NCKObh/7YeDzmXllRBwBzOi0Lns2ktQMR0bEPcBGYDPwFeB3gaszcwdAZj55gPNOjYjvRcT9wB8Cb2jv/z5wRUR8iF+Eyg+AiyPik8CvZeZYp8VN2LOJiAXAXwC/mplnRcQpwDsy8yudvkmV+vv72bprJs+fcnbVpUxozkPX0t9/QtVlSKqnscw8bd8dERFATnDeFcC5mXlvRPwRcAZAZn44It4G/HPgnog4LTP/JiJua++7MSL+XWb+XSfFddKzuQK4EfjV9vY/Ah/rpHFJUqU2AO+LiOMADnIZ7dXAloiYRatnQ/vY12XmbZn558AO4MSI+HXgx5k5BKwD3thpIZ2EzbzMvArYC5CZe4AXO30DSVI1MvNB4L8A342Ie4HPHeCwS4DbgPXAD/fZ/98i4v6IeAC4BbgXeD/wQPty3W8A/6vTWjoZIPBsOxUTICLeDvy80zeIiBm0riE+mplnt5P168BJwCPA+zLzZ522J0n6ZZk59yD7h4Hh/fZdus/XXwS+eIDzzjtAc3/Z/jNpnfRs/j2t7tLrIuL7tJLso5N4jz8BHt5n+yJgQ2YupdXFu2gSbUmSamjCsMnMu4B/Bvw2sAp4Q2be10njEdFP60bSl/fZfQ6/SNlh4NxJ1CtJqqFORqPt35V6fUT8HLg/M7dNcPpfAf+R1g2ocQsycwtAZm6JiOMP8r4rgZUAixcvnqhMSVIP6+Qy2oW0eiZ/2P7zJVqX1r4fER882EkRcTawLTPvPJzCMnNtZg5k5sD8+fMPpwlJUo/oZIDAXuA3M3MrvPTczReBt9EaofBL0x+0nQ78fkT8HjAHeE1E/B9ga0QsbPdqFgIT9Y4kSTXXSc/mpPGgadsGvL79JOrug52UmX+amf2ZeRLwAeDvMvNf0xpsMNg+bBC45rAqlyTVRic9m+9FxLXAN9rbfwDcEhGvAp46jPe8DLgqIi6kNaXC+YfRRiPF808zMvIMq1ev7lqbIyMjAF1tE2DJkiVdb1PS5Lxz2Ypb6JvZvZvae/dsvnXDDb9zqEMi4qvA+G2SUzttupOw+QhwHvDO9vbtwMLMfBZ4dydvkpk3Aze3v34CWNZpgdNJ7N1N7trF84/c0bU2j9jd6rx2s83NOzuee09SSX0zF4+d9r5f61ZzR95zVSeHXQH8NZN4oBM6CJvMzIj4Ea17NO8D/gn45mTeRJ1bPPdF/tPAzqrLOKTPbjzgs2OSpoHMvCUiTprseQcNm4h4Pa17LRcAT9B66j8ys6PejCRJ4w7Vs/khrQV4/kVmbgKIiI9PSVWSpEY51Gi0PwAeB/4+Ir4UEcuAmJqyJElNctCwycxvZ+b7ac3seTPwcWBBRHwxIs6covokSQ3QyQCBZ4ErgSvbMzafT2vyzJsK1yZJOpS9ezZ3OIKs4/YmOiQivkZrgbV5ETEKfKqTxTQ7Gfr8kvaDnGvafyRJFZromZgSMvOCwzmvkxkEJEl6RSbVs5E0eaOjo/Q993PmPHRt1aUcUt9zTzA6uqfqMtRQ9mwkScXZs5EK6+/vZ+uumTx/ytlVl3JIcx66lv7+E6ouQw1lz0aSVJxhI0kqzstoklRT5yx/5y1H9GXXlhh4YW9svmb9rRMtMXAirRmfT6C1uObazPz8RG0bNpJUU0f05eL/cfrTXVti4BPff00nh+0BPpGZd0XEq4E7I2J9Zj50qJMMG0kvGR0d7fqieC7g1yyZuQXY0v76mYh4GFgEGDaSOjM2NsY/PnAXi+e+2LU2XcCvudrr2rwZuG2iYw0bSS/jAn7qRETMpbWQ5scy8+mJjnc0miRpUiJiFq2guTIzv9XJOYaNJKljERHAV4CHM/NznZ7nZTRJqqkX9sbmDkeQddxeB4edDnwQuD8i7mnvuzgzrzvUSYaNJNXURM/ElJCZt3IYqzZ7GU2SVJw9Gx0Wn8eQNBmGjQ7L2NgYdz94NxzdxUb3tl7ufvTu7rX5VPeaknT4DBsdvqNh7xl7q67ikPpu9kqx1Av8JEqSijNsJEnFFbuMFhFzgFuA2e33uTozPxURxwJfB04CHgHel5k/K1WHJDXVu8581y3MpGtLDLCHzd+76XsTLTFwwJ/tEzVd8p7NLuB3M3Nne2qDWyPieuA8YENmXhYRFwEXAZ8sWIckNdNMFu89a2/Xlhjou76ji10H/Nmemf/vUCcVC5vMTGB8Nr9Z7T8JnAOc0d4/DNxM4bDpe+5J5jx0bdfai+dbc87lnO49uQvAi3u6257UYA6/r8YhfrYfUtHRaBExA7gTWAJ8ITNvi4gF7fUQyMwtEXH8Qc5dCawEWLz48HuJS5YsOexzD2Zk5BkAlr7uhALtvtDVNqWmcvh9dQ70s32ic4qGTWa+CJwWEUcD346IUydx7lpgLcDAwMCEqXkwJX6bGG9zaGioq+2ed955/ORnz/T89Ok/eWYGu2MXHFV1JZr2jnb4fRUO9LM9Mx841DlT8reQmU/Ruly2AtgaEQsB2q/bpqIGSVJ37fez/ZBKjkabD+zOzKci4kjgPcB/BdYBg8Bl7ddrStVQN/39/Ty/Z0stFq766e7Z7GZ31aVImmKH+Nl+SCUvoy0EhtvX9vqAqzLz2oj4AXBVRFwIbAbOL1iDJDXXHjZ3OIKs4/Y6OOqAP9snOqnkaLT7aK1Nvf/+J4Blpd5XkqaLiZ6JKeFgP9sn4txokl6ya9cufvL8DAepqOuaN0xCktRz7NlIesns2bM5cdaYg1TUdfZsJEnFGTaSpOIMG0lScYaNJKk4w0aSVJxhI0kqzrCRJBVn2EiSivOhTh2WXbt2wQs1WKvjKRjN0aqrqMVqsX3PPQlzZnWtPWlfho1UWH1Wiz2B0dFR2PNUF9uUWgwbHZbZs2ez+6jdtVglsX9Rf6U11Gm12NWrV/P8I1u62qYE3rORJE0Bw0aSVJxhI0kqzrCRJBVn2EiSinM0Wo/ZvLO7S/Jufa71+8SCo7o3amzzzhnE7K41J2kaMGx6SInnMV4YGQFgzklLu9bm64HR0VF20turOUrqHYZND6nb8xjbH93e1TYlNZdhI6mWnDKpXnr8/5IkqQns2UiqJadMqhd7NpKk4gwbSVJxxcImIk6MiL+PiIcj4sGI+JP2/mMjYn1EjLRfjylVgySpN5Ts2ewBPpGZvwm8HfhIRJwCXARsyMylwIb2tiSpwYqFTWZuycy72l8/AzwMLALOAYbbhw0D55aqQZLUG6ZkNFpEnAS8GbgNWJCZW6AVSBFx/FTUoAKe6vIzDuMTEnRvth54itavOOqYUyaphOJhExFzgW8CH8vMpyOi0/NWAisBFi9eXK5AHZYySx23ptZZuqh7U+uwqEytTeWUSSqlaNhExCxaQXNlZn6rvXtrRCxs92oWAtsOdG5mrgXWAgwMDGTJOjV5dZpaR52r0/9Xp0yql5Kj0QL4CvBwZn5un2+tAwbbXw8C15SqQZLUG0r2bE4HPgjcHxH3tPddDFwGXBURFwKbgfML1iBJ6gHFwiYzbwUOdoNmWan3lST1HmcQkCQVZ9hIkoozbCRJxRk2kqTiDBtJUnGGjSSpOMNGklScYSNJKm5KZn2WpCKecubxujBsJNWSM4/Xi2EjqZbqNEO1vGcjSZoCho0kqTjDRpJUnGEjSSrOsJEkFWfYSJKKM2wkScUZNpKk4gwbSVJxho0kqTjDRpJUnGEjSSrOsJEkFWfYSJKKM2wkScUZNpKk4gwbSVJxxcImIr4aEdsi4oF99h0bEesjYqT9ekyp95ck9Y6SPZsrgBX77bsI2JCZS4EN7W1JUsMVC5vMvAV4cr/d5wDD7a+HgXNLvb8kqXdM9T2bBZm5BaD9evzBDoyIlRGxMSI2bt++fcoKlCR1X88OEMjMtZk5kJkD8+fPr7ocSdIrMNVhszUiFgK0X7dN8ftLkiow1WGzDhhsfz0IXDPF7y9JqkDJoc9fA34AnBwRoxFxIXAZsDwiRoDl7W1JUsPNLNVwZl5wkG8tK/WekqTe1LMDBCRJzWHYSJKKM2wkScUZNpKk4gwbSVJxho0kqTjDRpJUnGEjSSrOsJEkFWfYSJKKM2wkScUZNpKk4gwbSVJxho0kqTjDRpJUnGEjSSrOsJEkFWfYSJKKM2wkScUZNpKk4gwbSVJxho0kqbiZVReg5hsaGmLTpk0THjcyMgLA6tWrO2p3yZIlHR9bF/5dqans2ahnzJgxg2effZann3666lJ63pFHHsmRRx5ZdRlSx+zZqLhOf6N+73vfC8CWLVu44oorClbUu+x9qKns2agn3H777YyNjQEwNjbGnXfeWXFFkrrJns0+vF5enUsuueRl2xdffDE33nhjRdWoE35eNBmGzWHohWvlTfugj/dqDrat+uqFz4uqV0nYRMQK4PPADODLmXlZFXXsr4m/TflBVylN/LyonCkPm4iYAXwBWA6MAndExLrMfGiqa6kzP+hS55p2JaCOqhgg8FZgU2b+ODNfAP4WOKeCOtRD+vr6DrktTQWHlJdTxWW0RcBP99keBd62/0ERsRJYCbB48eKpqUyVWb58+csGBJx55pkVVqOmsfdRvSp+fYwD7Mtf2pG5NjMHMnNg/vz5U1CWqrRq1apDbkuqtyrCZhQ4cZ/tfuCxCupQD5k3b95LD3WuWLGC4447ruKKJHVTFZfR7gCWRsRrgUeBDwD/qoI61GNWrVrF448/bq9GaqApD5vM3BMRfwzcSGvo81cz88GprkO9Z968eVx++eVVlyGpgEqes8nM64DrqnhvSdLUc3ypJKk4w0aSVJxhI0kqzrCRJBVn2EiSijNsJEnFGTaSpOIMG0lScZH5S3Ng9pyI2A78pOo6amwesKPqIjSt+W/wlduRmSuqLuJw1SJs9MpExMbMHKi6Dk1f/huUl9EkScUZNpKk4gyb6WFt1QVo2vPf4DTnPRtJUnH2bCRJxRk2kqTiDJuGi4gVEfEPEbEpIi6quh5NLxHx1YjYFhEPVF2LqmXYNFhEzAC+AJwFnAJcEBGnVFuVppkrgNo+iKjuMWya7a3Apsz8cWa+APwtcE7FNWkaycxbgCerrkPVM2yabRHw0322R9v7JGlKGTbNFgfY51h3SVPOsGm2UeDEfbb7gccqqkXSNGbYNNsdwNKIeG1EHAF8AFhXcU2SpiHDpsEycw/wx8CNwMPAVZn5YLVVaTqJiK8BPwBOjojRiLiw6ppUDaerkSQVZ89GklScYSNJKs6wkSQVZ9hIkoozbCRJxRk2EhARfxYRD0bEfRFxT0S8reqapCaZWXUBUtUi4h3A2cBvZeauiJgHHFFxWVKj2LORYCGwIzN3AWTmjsx8LCLeEhHfjYg7I+LGiFgYEb/SXh/oZGg9tBgRH6q0eqkGfKhT015EzAVuBY4CvgN8Hfi/wHeBczJze0S8H3hvZv7biFgO/Gfg88AfZabrtUgT8DKapr3M3BkRbwHeBbybVth8FjgVWB8RADOALe3j10fE+bQWpntTJUVLNWPPRtpPRPxL4CPAnMx8xwG+30er1/Na4Pcy874pLlGqHe/ZaNqLiJMjYuk+u06jNXHp/PbgASJiVkS8of39j7e/fwHw1YiYNZX1SnVkz0bTXvsS2uXA0cAeYBOwktb6P0PAr9C65PxXtHo01wBvzcxnIuJzwDOZ+ampr1yqD8NGklScl9EkScUZNpKk4gwbSVJxho0kqTjDRpJUnGEjSSrOsJEkFff/ATHbKfyqGJq8AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 402.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize possible correlations with Age and other columns\n",
    "\n",
    "sns.factorplot(y = 'Age', x = 'Sex', hue = 'Pclass', kind = 'box', data = combine)\n",
    "sns.factorplot(y = 'Age', x = 'Parch', kind = 'box', data = combine)\n",
    "sns.factorplot(y = 'Age', x = 'SibSp', kind = 'box', data = combine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:39.140926Z",
     "iopub.status.busy": "2021-04-02T17:55:39.139960Z",
     "iopub.status.idle": "2021-04-02T17:55:39.427758Z",
     "shell.execute_reply": "2021-04-02T17:55:39.428272Z"
    },
    "papermill": {
     "duration": 0.394055,
     "end_time": "2021-04-02T17:55:39.428453",
     "exception": false,
     "start_time": "2021-04-02T17:55:39.034398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(combine.drop(['Survived', 'Name', 'PassengerId', 'Fare'], axis = 1).corr(), annot = True, cmap = 'coolwarm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:39.630403Z",
     "iopub.status.busy": "2021-04-02T17:55:39.629447Z",
     "iopub.status.idle": "2021-04-02T17:55:39.637244Z",
     "shell.execute_reply": "2021-04-02T17:55:39.636629Z"
    },
    "papermill": {
     "duration": 0.110334,
     "end_time": "2021-04-02T17:55:39.637403",
     "exception": false,
     "start_time": "2021-04-02T17:55:39.527069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "256"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine number of missing age values and create list of them\n",
    "\n",
    "age_nan_indices = list(combine[combine['Age'].isnull()].index)\n",
    "len(age_nan_indices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:39.849849Z",
     "iopub.status.busy": "2021-04-02T17:55:39.849112Z",
     "iopub.status.idle": "2021-04-02T17:55:40.432472Z",
     "shell.execute_reply": "2021-04-02T17:55:40.432963Z"
    },
    "papermill": {
     "duration": 0.696369,
     "end_time": "2021-04-02T17:55:40.433149",
     "exception": false,
     "start_time": "2021-04-02T17:55:39.736780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Loop through list of missing ages and impute\n",
    "\n",
    "for index in age_nan_indices:\n",
    "    median_age = combine['Age'].median()\n",
    "    predict_age = combine['Age'][(combine['SibSp'] == combine.iloc[index]['SibSp']) \n",
    "                                 & (combine['Parch'] == combine.iloc[index]['Parch'])\n",
    "                                 & (combine['Pclass'] == combine.iloc[index][\"Pclass\"])].median()\n",
    "    if np.isnan(predict_age):\n",
    "        combine['Age'].iloc[index] = median_age\n",
    "    else:\n",
    "        combine['Age'].iloc[index] = predict_age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:40.636905Z",
     "iopub.status.busy": "2021-04-02T17:55:40.636167Z",
     "iopub.status.idle": "2021-04-02T17:55:40.641439Z",
     "shell.execute_reply": "2021-04-02T17:55:40.641935Z"
    },
    "papermill": {
     "duration": 0.108995,
     "end_time": "2021-04-02T17:55:40.642104",
     "exception": false,
     "start_time": "2021-04-02T17:55:40.533109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Re-examine amount of missing age values after imputing\n",
    "\n",
    "combine['Age'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:40.847111Z",
     "iopub.status.busy": "2021-04-02T17:55:40.846396Z",
     "iopub.status.idle": "2021-04-02T17:55:41.160191Z",
     "shell.execute_reply": "2021-04-02T17:55:41.160712Z"
    },
    "papermill": {
     "duration": 0.418114,
     "end_time": "2021-04-02T17:55:41.160883",
     "exception": false,
     "start_time": "2021-04-02T17:55:40.742769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Passenger Fare Distribution')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Examine fare distribution in combined dataset\n",
    "\n",
    "sns.distplot(combine['Fare'], label = 'Skewness: %.2f'%(combine['Fare'].skew()))\n",
    "plt.legend(loc = 'best')\n",
    "plt.title('Passenger Fare Distribution')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:41.367884Z",
     "iopub.status.busy": "2021-04-02T17:55:41.367193Z",
     "iopub.status.idle": "2021-04-02T17:55:41.374665Z",
     "shell.execute_reply": "2021-04-02T17:55:41.375222Z"
    },
    "papermill": {
     "duration": 0.112606,
     "end_time": "2021-04-02T17:55:41.375427",
     "exception": false,
     "start_time": "2021-04-02T17:55:41.262821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Perform log transformation\n",
    "\n",
    "combine['Fare'] = combine['Fare'].map(lambda x: np.log(x) if x > 0 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:41.583701Z",
     "iopub.status.busy": "2021-04-02T17:55:41.582996Z",
     "iopub.status.idle": "2021-04-02T17:55:41.852092Z",
     "shell.execute_reply": "2021-04-02T17:55:41.852610Z"
    },
    "papermill": {
     "duration": 0.374896,
     "end_time": "2021-04-02T17:55:41.852783",
     "exception": false,
     "start_time": "2021-04-02T17:55:41.477887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Passenger Fare Distribution After Log Transformation')"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Examine fare distribution after log transformation\n",
    "\n",
    "sns.distplot(combine['Fare'], label = 'Skewness: %.2f'%(combine['Fare'].skew()))\n",
    "plt.legend(loc = 'best')\n",
    "plt.title('Passenger Fare Distribution After Log Transformation')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:42.079254Z",
     "iopub.status.busy": "2021-04-02T17:55:42.078598Z",
     "iopub.status.idle": "2021-04-02T17:55:42.083893Z",
     "shell.execute_reply": "2021-04-02T17:55:42.083400Z"
    },
    "papermill": {
     "duration": 0.127264,
     "end_time": "2021-04-02T17:55:42.084032",
     "exception": false,
     "start_time": "2021-04-02T17:55:41.956768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.981001</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.266662</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.070022</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.972177</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.085672</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1       0.0       3   \n",
       "1            2       1.0       1   \n",
       "2            3       1.0       3   \n",
       "3            4       1.0       1   \n",
       "4            5       0.0       3   \n",
       "\n",
       "                                                Name  Sex   Age  SibSp  Parch  \\\n",
       "0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n",
       "2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n",
       "4                           Allen, Mr. William Henry    0  35.0      0      0   \n",
       "\n",
       "       Fare Embarked  \n",
       "0  1.981001        S  \n",
       "1  4.266662        C  \n",
       "2  2.070022        S  \n",
       "3  3.972177        S  \n",
       "4  2.085672        S  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Begin feature engineering process by analyzing data\n",
    "\n",
    "combine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:42.306995Z",
     "iopub.status.busy": "2021-04-02T17:55:42.306135Z",
     "iopub.status.idle": "2021-04-02T17:55:42.310612Z",
     "shell.execute_reply": "2021-04-02T17:55:42.310096Z"
    },
    "papermill": {
     "duration": 0.122677,
     "end_time": "2021-04-02T17:55:42.310762",
     "exception": false,
     "start_time": "2021-04-02T17:55:42.188085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Name Title\n",
       "0                            Braund, Mr. Owen Harris    Mr\n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...   Mrs\n",
       "2                             Heikkinen, Miss. Laina  Miss\n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)   Mrs\n",
       "4                           Allen, Mr. William Henry    Mr"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create feature of Title from Name\n",
    "\n",
    "combine['Title'] = [name.split(',')[1].split('.')[0].strip() for name in combine['Name']]\n",
    "combine[['Name', 'Title']].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:42.522579Z",
     "iopub.status.busy": "2021-04-02T17:55:42.521859Z",
     "iopub.status.idle": "2021-04-02T17:55:42.530291Z",
     "shell.execute_reply": "2021-04-02T17:55:42.530792Z"
    },
    "papermill": {
     "duration": 0.115953,
     "end_time": "2021-04-02T17:55:42.530960",
     "exception": false,
     "start_time": "2021-04-02T17:55:42.415007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr              753\n",
       "Miss            255\n",
       "Mrs             197\n",
       "Master           60\n",
       "Dr                8\n",
       "Rev               8\n",
       "Col               4\n",
       "Major             2\n",
       "Mlle              2\n",
       "Ms                2\n",
       "Capt              1\n",
       "Sir               1\n",
       "Mme               1\n",
       "Lady              1\n",
       "Jonkheer          1\n",
       "Don               1\n",
       "Dona              1\n",
       "the Countess      1\n",
       "Name: Title, dtype: int64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine value counts of Title\n",
    "\n",
    "combine['Title'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:42.744298Z",
     "iopub.status.busy": "2021-04-02T17:55:42.743291Z",
     "iopub.status.idle": "2021-04-02T17:55:42.754272Z",
     "shell.execute_reply": "2021-04-02T17:55:42.754772Z"
    },
    "papermill": {
     "duration": 0.119484,
     "end_time": "2021-04-02T17:55:42.754958",
     "exception": false,
     "start_time": "2021-04-02T17:55:42.635474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Simplify Title feature by combining like values\n",
    "\n",
    "combine['Title'] = combine['Title'].replace(['Dr', 'Rev', 'Col', 'Major', 'Lady', 'Jonkheer', 'Don', 'Capt', 'the Countess',\n",
    "                                             'Sir', 'Dona'], 'Rare')\n",
    "combine['Title'] = combine['Title'].replace(['Mlle', 'Ms'], 'Miss')\n",
    "combine['Title'] = combine['Title'].replace('Mme', 'Mrs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:42.977500Z",
     "iopub.status.busy": "2021-04-02T17:55:42.976472Z",
     "iopub.status.idle": "2021-04-02T17:55:43.250737Z",
     "shell.execute_reply": "2021-04-02T17:55:43.250187Z"
    },
    "papermill": {
     "duration": 0.388914,
     "end_time": "2021-04-02T17:55:43.250884",
     "exception": false,
     "start_time": "2021-04-02T17:55:42.861970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Title', ylabel='count'>"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(combine['Title'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:43.472838Z",
     "iopub.status.busy": "2021-04-02T17:55:43.471095Z",
     "iopub.status.idle": "2021-04-02T17:55:43.483078Z",
     "shell.execute_reply": "2021-04-02T17:55:43.482550Z"
    },
    "papermill": {
     "duration": 0.126309,
     "end_time": "2021-04-02T17:55:43.483218",
     "exception": false,
     "start_time": "2021-04-02T17:55:43.356909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mrs</td>\n",
       "      <td>0.793651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Miss</td>\n",
       "      <td>0.711111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Master</td>\n",
       "      <td>0.589744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rare</td>\n",
       "      <td>0.347826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mr</td>\n",
       "      <td>0.157895</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Title  Survived\n",
       "3     Mrs  0.793651\n",
       "1    Miss  0.711111\n",
       "0  Master  0.589744\n",
       "4    Rare  0.347826\n",
       "2      Mr  0.157895"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average survival rate based on Title\n",
    "\n",
    "combine[['Title', 'Survived']].groupby(['Title'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:43.726750Z",
     "iopub.status.busy": "2021-04-02T17:55:43.721668Z",
     "iopub.status.idle": "2021-04-02T17:55:44.087575Z",
     "shell.execute_reply": "2021-04-02T17:55:44.086913Z"
    },
    "papermill": {
     "duration": 0.49751,
     "end_time": "2021-04-02T17:55:44.087724",
     "exception": false,
     "start_time": "2021-04-02T17:55:43.590214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Average Survival Rate by Title')"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize average survival rate based on Title -- (looks like women really have a knack for survival)\n",
    "\n",
    "sns.factorplot(x = 'Title', y = 'Survived', data = combine, kind = 'bar')\n",
    "plt.ylabel('Survival Rate')\n",
    "plt.title('Average Survival Rate by Title')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:44.321404Z",
     "iopub.status.busy": "2021-04-02T17:55:44.320347Z",
     "iopub.status.idle": "2021-04-02T17:55:44.324569Z",
     "shell.execute_reply": "2021-04-02T17:55:44.324001Z"
    },
    "papermill": {
     "duration": 0.128655,
     "end_time": "2021-04-02T17:55:44.324714",
     "exception": false,
     "start_time": "2021-04-02T17:55:44.196059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.981001</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.266662</td>\n",
       "      <td>C</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.070022</td>\n",
       "      <td>S</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.972177</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.085672</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch      Fare Embarked  \\\n",
       "0            1       0.0       3    0  22.0      1      0  1.981001        S   \n",
       "1            2       1.0       1    1  38.0      1      0  4.266662        C   \n",
       "2            3       1.0       3    1  26.0      0      0  2.070022        S   \n",
       "3            4       1.0       1    1  35.0      1      0  3.972177        S   \n",
       "4            5       0.0       3    0  35.0      0      0  2.085672        S   \n",
       "\n",
       "  Title  \n",
       "0    Mr  \n",
       "1   Mrs  \n",
       "2  Miss  \n",
       "3   Mrs  \n",
       "4    Mr  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop Name column as it is no longer needed\n",
    "\n",
    "combine = combine.drop('Name', axis = 1)\n",
    "combine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:44.555104Z",
     "iopub.status.busy": "2021-04-02T17:55:44.554476Z",
     "iopub.status.idle": "2021-04-02T17:55:44.559462Z",
     "shell.execute_reply": "2021-04-02T17:55:44.557959Z"
    },
    "papermill": {
     "duration": 0.126318,
     "end_time": "2021-04-02T17:55:44.559628",
     "exception": false,
     "start_time": "2021-04-02T17:55:44.433310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>FamilySize</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SibSp  Parch  FamilySize\n",
       "0      1      0           2\n",
       "1      1      0           2\n",
       "2      0      0           1\n",
       "3      1      0           2\n",
       "4      0      0           1\n",
       "5      0      0           1\n",
       "6      0      0           1\n",
       "7      3      1           5\n",
       "8      0      2           3\n",
       "9      1      0           2"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create family size feature from SibSp and Parch\n",
    "\n",
    "combine['FamilySize'] = combine['SibSp'] + combine['Parch'] + 1\n",
    "combine[['SibSp', 'Parch', 'FamilySize']].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:44.797236Z",
     "iopub.status.busy": "2021-04-02T17:55:44.796515Z",
     "iopub.status.idle": "2021-04-02T17:55:44.800478Z",
     "shell.execute_reply": "2021-04-02T17:55:44.801022Z"
    },
    "papermill": {
     "duration": 0.12926,
     "end_time": "2021-04-02T17:55:44.801191",
     "exception": false,
     "start_time": "2021-04-02T17:55:44.671931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.724138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.578431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.552795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.303538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0.052632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FamilySize  Survived\n",
       "3           4  0.724138\n",
       "2           3  0.578431\n",
       "1           2  0.552795\n",
       "6           7  0.333333\n",
       "0           1  0.303538\n",
       "4           5  0.200000\n",
       "5           6  0.052632\n",
       "7           8  0.000000\n",
       "8          11       NaN"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate average survival rate based on family size\n",
    "\n",
    "combine[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:45.027372Z",
     "iopub.status.busy": "2021-04-02T17:55:45.026695Z",
     "iopub.status.idle": "2021-04-02T17:55:45.043514Z",
     "shell.execute_reply": "2021-04-02T17:55:45.043983Z"
    },
    "papermill": {
     "duration": 0.132744,
     "end_time": "2021-04-02T17:55:45.044159",
     "exception": false,
     "start_time": "2021-04-02T17:55:44.911415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.514535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.303538</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IsAlone  Survived\n",
       "0        0  0.514535\n",
       "1        1  0.303538"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create feature for passengers that are travelling alone and calculate their average survival\n",
    "\n",
    "combine['IsAlone'] = 0\n",
    "combine.loc[combine['FamilySize'] == 1, 'IsAlone'] = 1\n",
    "\n",
    "combine[['IsAlone', 'Survived']].groupby('IsAlone', as_index = False).mean().sort_values(by = 'Survived', ascending = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:45.270516Z",
     "iopub.status.busy": "2021-04-02T17:55:45.269572Z",
     "iopub.status.idle": "2021-04-02T17:55:45.285660Z",
     "shell.execute_reply": "2021-04-02T17:55:45.286158Z"
    },
    "papermill": {
     "duration": 0.130802,
     "end_time": "2021-04-02T17:55:45.286369",
     "exception": false,
     "start_time": "2021-04-02T17:55:45.155567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "      <th>IsAlone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.981001</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>4.266662</td>\n",
       "      <td>C</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>2.070022</td>\n",
       "      <td>S</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>3.972177</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>2.085672</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex   Age      Fare Embarked Title  IsAlone\n",
       "0            1       0.0       3    0  22.0  1.981001        S    Mr        0\n",
       "1            2       1.0       1    1  38.0  4.266662        C   Mrs        0\n",
       "2            3       1.0       3    1  26.0  2.070022        S  Miss        1\n",
       "3            4       1.0       1    1  35.0  3.972177        S   Mrs        0\n",
       "4            5       0.0       3    0  35.0  2.085672        S    Mr        1"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop SibSp, Parch, and FamilySize columns\n",
    "\n",
    "combine = combine.drop(['SibSp', 'Parch', 'FamilySize'], axis = 1)\n",
    "combine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:45.512949Z",
     "iopub.status.busy": "2021-04-02T17:55:45.512293Z",
     "iopub.status.idle": "2021-04-02T17:55:45.538958Z",
     "shell.execute_reply": "2021-04-02T17:55:45.538440Z"
    },
    "papermill": {
     "duration": 0.141057,
     "end_time": "2021-04-02T17:55:45.539103",
     "exception": false,
     "start_time": "2021-04-02T17:55:45.398046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AgeClass</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(0.0902, 16.136]</td>\n",
       "      <td>0.532110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(16.136, 32.102]</td>\n",
       "      <td>0.339662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(32.102, 48.068]</td>\n",
       "      <td>0.412844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(48.068, 64.034]</td>\n",
       "      <td>0.434783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(64.034, 80.0]</td>\n",
       "      <td>0.090909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           AgeClass  Survived\n",
       "0  (0.0902, 16.136]  0.532110\n",
       "1  (16.136, 32.102]  0.339662\n",
       "2  (32.102, 48.068]  0.412844\n",
       "3  (48.068, 64.034]  0.434783\n",
       "4    (64.034, 80.0]  0.090909"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create different classes for age groups and calculate average survival rates\n",
    "\n",
    "combine['AgeClass'] = pd.cut(combine['Age'], 5)\n",
    "\n",
    "combine[['AgeClass', 'Survived']].groupby('AgeClass', as_index = False).mean().sort_values(by = 'AgeClass')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:45.826696Z",
     "iopub.status.busy": "2021-04-02T17:55:45.825968Z",
     "iopub.status.idle": "2021-04-02T17:55:45.829579Z",
     "shell.execute_reply": "2021-04-02T17:55:45.828905Z"
    },
    "papermill": {
     "duration": 0.177975,
     "end_time": "2021-04-02T17:55:45.829723",
     "exception": false,
     "start_time": "2021-04-02T17:55:45.651748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Encode numerical value to each Age group using the AgeClass info\n",
    "\n",
    "combine.loc[combine['Age'] <= 16.136, 'Age'] = 0\n",
    "combine.loc[(combine['Age'] > 16.136) & (combine['Age'] <= 32.102), 'Age'] = 1\n",
    "combine.loc[(combine['Age'] > 32.102) & (combine['Age'] <= 48.068), 'Age'] = 2\n",
    "combine.loc[(combine['Age'] > 48.068) & (combine['Age'] <= 64.034), 'Age'] = 3\n",
    "combine.loc[combine['Age'] > 64.034 , 'Age'] = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:46.074766Z",
     "iopub.status.busy": "2021-04-02T17:55:46.074042Z",
     "iopub.status.idle": "2021-04-02T17:55:46.078457Z",
     "shell.execute_reply": "2021-04-02T17:55:46.077929Z"
    },
    "papermill": {
     "duration": 0.134452,
     "end_time": "2021-04-02T17:55:46.078596",
     "exception": false,
     "start_time": "2021-04-02T17:55:45.944144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>AgeClass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.981001</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "      <td>(16.136, 32.102]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.266662</td>\n",
       "      <td>C</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>0</td>\n",
       "      <td>(32.102, 48.068]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.070022</td>\n",
       "      <td>S</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "      <td>(16.136, 32.102]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.972177</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>0</td>\n",
       "      <td>(32.102, 48.068]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.085672</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>1</td>\n",
       "      <td>(32.102, 48.068]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex  Age      Fare Embarked Title  IsAlone  \\\n",
       "0            1       0.0       3    0  1.0  1.981001        S    Mr        0   \n",
       "1            2       1.0       1    1  2.0  4.266662        C   Mrs        0   \n",
       "2            3       1.0       3    1  1.0  2.070022        S  Miss        1   \n",
       "3            4       1.0       1    1  2.0  3.972177        S   Mrs        0   \n",
       "4            5       0.0       3    0  2.0  2.085672        S    Mr        1   \n",
       "\n",
       "           AgeClass  \n",
       "0  (16.136, 32.102]  \n",
       "1  (32.102, 48.068]  \n",
       "2  (16.136, 32.102]  \n",
       "3  (32.102, 48.068]  \n",
       "4  (32.102, 48.068]  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:46.307049Z",
     "iopub.status.busy": "2021-04-02T17:55:46.306454Z",
     "iopub.status.idle": "2021-04-02T17:55:46.323679Z",
     "shell.execute_reply": "2021-04-02T17:55:46.323145Z"
    },
    "papermill": {
     "duration": 0.132198,
     "end_time": "2021-04-02T17:55:46.323825",
     "exception": false,
     "start_time": "2021-04-02T17:55:46.191627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "      <th>IsAlone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.981001</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.266662</td>\n",
       "      <td>C</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.070022</td>\n",
       "      <td>S</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.972177</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.085672</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex  Age      Fare Embarked Title  IsAlone\n",
       "0            1       0.0       3    0  1.0  1.981001        S    Mr        0\n",
       "1            2       1.0       1    1  2.0  4.266662        C   Mrs        0\n",
       "2            3       1.0       3    1  1.0  2.070022        S  Miss        1\n",
       "3            4       1.0       1    1  2.0  3.972177        S   Mrs        0\n",
       "4            5       0.0       3    0  2.0  2.085672        S    Mr        1"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop AgeClass column since Age groups are already encoded\n",
    "\n",
    "combine = combine.drop('AgeClass', axis = 1)\n",
    "\n",
    "combine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:46.563950Z",
     "iopub.status.busy": "2021-04-02T17:55:46.563276Z",
     "iopub.status.idle": "2021-04-02T17:55:46.566378Z",
     "shell.execute_reply": "2021-04-02T17:55:46.567366Z"
    },
    "papermill": {
     "duration": 0.131174,
     "end_time": "2021-04-02T17:55:46.567646",
     "exception": false,
     "start_time": "2021-04-02T17:55:46.436472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1299 entries, 0 to 1298\n",
      "Data columns (total 9 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  1299 non-null   int64  \n",
      " 1   Survived     881 non-null    float64\n",
      " 2   Pclass       1299 non-null   int64  \n",
      " 3   Sex          1299 non-null   int64  \n",
      " 4   Age          1299 non-null   float64\n",
      " 5   Fare         1299 non-null   float64\n",
      " 6   Embarked     1299 non-null   object \n",
      " 7   Title        1299 non-null   object \n",
      " 8   IsAlone      1299 non-null   int64  \n",
      "dtypes: float64(3), int64(4), object(2)\n",
      "memory usage: 91.5+ KB\n"
     ]
    }
   ],
   "source": [
    "# Check data types\n",
    "\n",
    "combine.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:46.803608Z",
     "iopub.status.busy": "2021-04-02T17:55:46.802951Z",
     "iopub.status.idle": "2021-04-02T17:55:46.809150Z",
     "shell.execute_reply": "2021-04-02T17:55:46.809729Z"
    },
    "papermill": {
     "duration": 0.125204,
     "end_time": "2021-04-02T17:55:46.809912",
     "exception": false,
     "start_time": "2021-04-02T17:55:46.684708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert Age value to int\n",
    "\n",
    "combine['Age'] = combine['Age'].astype('int')\n",
    "combine['Age'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:47.045476Z",
     "iopub.status.busy": "2021-04-02T17:55:47.044833Z",
     "iopub.status.idle": "2021-04-02T17:55:47.068967Z",
     "shell.execute_reply": "2021-04-02T17:55:47.069471Z"
    },
    "papermill": {
     "duration": 0.144985,
     "end_time": "2021-04-02T17:55:47.069676",
     "exception": false,
     "start_time": "2021-04-02T17:55:46.924691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Rare</th>\n",
       "      <th>Em_C</th>\n",
       "      <th>Em_Q</th>\n",
       "      <th>Em_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.981001</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.266662</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.070022</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.972177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2.085672</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex  Age      Fare  IsAlone  Title_Master  \\\n",
       "0            1       0.0       3    0    1  1.981001        0             0   \n",
       "1            2       1.0       1    1    2  4.266662        0             0   \n",
       "2            3       1.0       3    1    1  2.070022        1             0   \n",
       "3            4       1.0       1    1    2  3.972177        0             0   \n",
       "4            5       0.0       3    0    2  2.085672        1             0   \n",
       "\n",
       "   Title_Miss  Title_Mr  Title_Mrs  Title_Rare  Em_C  Em_Q  Em_S  \n",
       "0           0         1          0           0     0     0     1  \n",
       "1           0         0          1           0     1     0     0  \n",
       "2           1         0          0           0     0     0     1  \n",
       "3           0         0          1           0     0     0     1  \n",
       "4           0         1          0           0     0     0     1  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode Title and Embarked values to make them numerical\n",
    "\n",
    "combine = pd.get_dummies(combine, columns = ['Title'])\n",
    "combine = pd.get_dummies(combine, columns = ['Embarked'], prefix = 'Em')\n",
    "combine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:47.304708Z",
     "iopub.status.busy": "2021-04-02T17:55:47.304074Z",
     "iopub.status.idle": "2021-04-02T17:55:47.322390Z",
     "shell.execute_reply": "2021-04-02T17:55:47.322886Z"
    },
    "papermill": {
     "duration": 0.137561,
     "end_time": "2021-04-02T17:55:47.323058",
     "exception": false,
     "start_time": "2021-04-02T17:55:47.185497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FareClass</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(-0.00624, 1.56]</td>\n",
       "      <td>0.062500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(1.56, 3.119]</td>\n",
       "      <td>0.288719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(3.119, 4.679]</td>\n",
       "      <td>0.517007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(4.679, 6.239]</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          FareClass  Survived\n",
       "0  (-0.00624, 1.56]  0.062500\n",
       "1     (1.56, 3.119]  0.288719\n",
       "2    (3.119, 4.679]  0.517007\n",
       "3    (4.679, 6.239]  0.750000"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create different classes for Fare values and calculate average survival\n",
    "\n",
    "combine['FareClass'] = pd.cut(combine['Fare'], 4)\n",
    "\n",
    "combine[['FareClass', 'Survived']].groupby(['FareClass'], as_index = False).mean().sort_values(by = 'FareClass')\n",
    "\n",
    "# as expected, those with the highest fares had a higher likelihood of surviving"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:47.558787Z",
     "iopub.status.busy": "2021-04-02T17:55:47.558047Z",
     "iopub.status.idle": "2021-04-02T17:55:47.581727Z",
     "shell.execute_reply": "2021-04-02T17:55:47.582195Z"
    },
    "papermill": {
     "duration": 0.143379,
     "end_time": "2021-04-02T17:55:47.582404",
     "exception": false,
     "start_time": "2021-04-02T17:55:47.439025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Rare</th>\n",
       "      <th>Em_C</th>\n",
       "      <th>Em_Q</th>\n",
       "      <th>Em_S</th>\n",
       "      <th>FareClass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>(1.56, 3.119]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>(3.119, 4.679]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>(1.56, 3.119]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>(3.119, 4.679]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>(1.56, 3.119]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex  Age  Fare  IsAlone  Title_Master  \\\n",
       "0            1       0.0       3    0    1     1        0             0   \n",
       "1            2       1.0       1    1    2     2        0             0   \n",
       "2            3       1.0       3    1    1     1        1             0   \n",
       "3            4       1.0       1    1    2     2        0             0   \n",
       "4            5       0.0       3    0    2     1        1             0   \n",
       "\n",
       "   Title_Miss  Title_Mr  Title_Mrs  Title_Rare  Em_C  Em_Q  Em_S  \\\n",
       "0           0         1          0           0     0     0     1   \n",
       "1           0         0          1           0     1     0     0   \n",
       "2           1         0          0           0     0     0     1   \n",
       "3           0         0          1           0     0     0     1   \n",
       "4           0         1          0           0     0     0     1   \n",
       "\n",
       "        FareClass  \n",
       "0   (1.56, 3.119]  \n",
       "1  (3.119, 4.679]  \n",
       "2   (1.56, 3.119]  \n",
       "3  (3.119, 4.679]  \n",
       "4   (1.56, 3.119]  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert Fare values into categorical values based on FareClass and make sure its integer type\n",
    "\n",
    "combine.loc[combine['Fare'] <= 1.56, 'Fare'] = 0\n",
    "combine.loc[(combine['Fare'] > 1.56) & (combine['Fare'] <= 3.119), 'Fare'] = 1\n",
    "combine.loc[(combine['Fare'] > 3.119) & (combine['Fare'] <= 4.679), 'Fare'] = 2\n",
    "combine.loc[combine['Fare'] > 4.679, 'Fare'] = 3\n",
    "\n",
    "combine['Fare'] = combine['Fare'].astype('int')\n",
    "\n",
    "combine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:47.817946Z",
     "iopub.status.busy": "2021-04-02T17:55:47.817344Z",
     "iopub.status.idle": "2021-04-02T17:55:47.833354Z",
     "shell.execute_reply": "2021-04-02T17:55:47.833853Z"
    },
    "papermill": {
     "duration": 0.134761,
     "end_time": "2021-04-02T17:55:47.834055",
     "exception": false,
     "start_time": "2021-04-02T17:55:47.699294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Rare</th>\n",
       "      <th>Em_C</th>\n",
       "      <th>Em_Q</th>\n",
       "      <th>Em_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex  Age  Fare  IsAlone  Title_Master  \\\n",
       "0            1       0.0       3    0    1     1        0             0   \n",
       "1            2       1.0       1    1    2     2        0             0   \n",
       "2            3       1.0       3    1    1     1        1             0   \n",
       "3            4       1.0       1    1    2     2        0             0   \n",
       "4            5       0.0       3    0    2     1        1             0   \n",
       "\n",
       "   Title_Miss  Title_Mr  Title_Mrs  Title_Rare  Em_C  Em_Q  Em_S  \n",
       "0           0         1          0           0     0     0     1  \n",
       "1           0         0          1           0     1     0     0  \n",
       "2           1         0          0           0     0     0     1  \n",
       "3           0         0          1           0     0     0     1  \n",
       "4           0         1          0           0     0     0     1  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop FareClass since it's no longer needed\n",
    "\n",
    "combine = combine.drop('FareClass', axis = 1)\n",
    "combine.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:48.074838Z",
     "iopub.status.busy": "2021-04-02T17:55:48.074131Z",
     "iopub.status.idle": "2021-04-02T17:55:48.079533Z",
     "shell.execute_reply": "2021-04-02T17:55:48.079009Z"
    },
    "papermill": {
     "duration": 0.127612,
     "end_time": "2021-04-02T17:55:48.079679",
     "exception": false,
     "start_time": "2021-04-02T17:55:47.952067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Separate combined dataset back into training and testing sets\n",
    "\n",
    "train_df = combine[:len(train_df)]\n",
    "test_df = combine[len(train_df):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:48.354987Z",
     "iopub.status.busy": "2021-04-02T17:55:48.353925Z",
     "iopub.status.idle": "2021-04-02T17:55:48.359761Z",
     "shell.execute_reply": "2021-04-02T17:55:48.359184Z"
    },
    "papermill": {
     "duration": 0.162402,
     "end_time": "2021-04-02T17:55:48.359900",
     "exception": false,
     "start_time": "2021-04-02T17:55:48.197498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Rare</th>\n",
       "      <th>Em_C</th>\n",
       "      <th>Em_Q</th>\n",
       "      <th>Em_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex  Age  Fare  IsAlone  Title_Master  \\\n",
       "0            1       0.0       3    0    1     1        0             0   \n",
       "1            2       1.0       1    1    2     2        0             0   \n",
       "2            3       1.0       3    1    1     1        1             0   \n",
       "3            4       1.0       1    1    2     2        0             0   \n",
       "4            5       0.0       3    0    2     1        1             0   \n",
       "\n",
       "   Title_Miss  Title_Mr  Title_Mrs  Title_Rare  Em_C  Em_Q  Em_S  \n",
       "0           0         1          0           0     0     0     1  \n",
       "1           0         0          1           0     1     0     0  \n",
       "2           1         0          0           0     0     0     1  \n",
       "3           0         0          1           0     0     0     1  \n",
       "4           0         1          0           0     0     0     1  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:48.637515Z",
     "iopub.status.busy": "2021-04-02T17:55:48.636454Z",
     "iopub.status.idle": "2021-04-02T17:55:48.640744Z",
     "shell.execute_reply": "2021-04-02T17:55:48.641349Z"
    },
    "papermill": {
     "duration": 0.15651,
     "end_time": "2021-04-02T17:55:48.641520",
     "exception": false,
     "start_time": "2021-04-02T17:55:48.485010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Rare</th>\n",
       "      <th>Em_C</th>\n",
       "      <th>Em_Q</th>\n",
       "      <th>Em_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex  Age  Fare  IsAlone  Title_Master  \\\n",
       "0            1         0       3    0    1     1        0             0   \n",
       "1            2         1       1    1    2     2        0             0   \n",
       "2            3         1       3    1    1     1        1             0   \n",
       "3            4         1       1    1    2     2        0             0   \n",
       "4            5         0       3    0    2     1        1             0   \n",
       "\n",
       "   Title_Miss  Title_Mr  Title_Mrs  Title_Rare  Em_C  Em_Q  Em_S  \n",
       "0           0         1          0           0     0     0     1  \n",
       "1           0         0          1           0     1     0     0  \n",
       "2           1         0          0           0     0     0     1  \n",
       "3           0         0          1           0     0     0     1  \n",
       "4           0         1          0           0     0     0     1  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert Survived column into integer type in training set\n",
    "\n",
    "train_df['Survived'] = train_df['Survived'].astype('int')\n",
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:48.898357Z",
     "iopub.status.busy": "2021-04-02T17:55:48.897495Z",
     "iopub.status.idle": "2021-04-02T17:55:48.902072Z",
     "shell.execute_reply": "2021-04-02T17:55:48.901497Z"
    },
    "papermill": {
     "duration": 0.141615,
     "end_time": "2021-04-02T17:55:48.902215",
     "exception": false,
     "start_time": "2021-04-02T17:55:48.760600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Rare</th>\n",
       "      <th>Em_C</th>\n",
       "      <th>Em_Q</th>\n",
       "      <th>Em_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex  Age  Fare  IsAlone  Title_Master  Title_Miss  \\\n",
       "0         0       3    0    1     1        0             0           0   \n",
       "1         1       1    1    2     2        0             0           0   \n",
       "2         1       3    1    1     1        1             0           1   \n",
       "3         1       1    1    2     2        0             0           0   \n",
       "4         0       3    0    2     1        1             0           0   \n",
       "\n",
       "   Title_Mr  Title_Mrs  Title_Rare  Em_C  Em_Q  Em_S  \n",
       "0         1          0           0     0     0     1  \n",
       "1         0          1           0     1     0     0  \n",
       "2         0          0           0     0     0     1  \n",
       "3         0          1           0     0     0     1  \n",
       "4         1          0           0     0     0     1  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop PassengerId column from training set\n",
    "\n",
    "train_df = train_df.drop('PassengerId', axis = 1)\n",
    "\n",
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:49.165370Z",
     "iopub.status.busy": "2021-04-02T17:55:49.164419Z",
     "iopub.status.idle": "2021-04-02T17:55:49.168909Z",
     "shell.execute_reply": "2021-04-02T17:55:49.168421Z"
    },
    "papermill": {
     "duration": 0.140761,
     "end_time": "2021-04-02T17:55:49.169051",
     "exception": false,
     "start_time": "2021-04-02T17:55:49.028290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Rare</th>\n",
       "      <th>Em_C</th>\n",
       "      <th>Em_Q</th>\n",
       "      <th>Em_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>883</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass  Sex  Age  Fare  IsAlone  Title_Master  Title_Miss  \\\n",
       "881          892       3    0    2     1        1             0           0   \n",
       "882          893       3    1    2     1        0             0           0   \n",
       "883          894       2    0    3     1        1             0           0   \n",
       "884          895       3    0    1     1        1             0           0   \n",
       "885          896       3    1    1     1        0             0           0   \n",
       "\n",
       "     Title_Mr  Title_Mrs  Title_Rare  Em_C  Em_Q  Em_S  \n",
       "881         1          0           0     0     1     0  \n",
       "882         0          1           0     0     0     1  \n",
       "883         1          0           0     0     1     0  \n",
       "884         1          0           0     0     0     1  \n",
       "885         0          1           0     0     0     1  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop Survived column from testing set\n",
    "\n",
    "test_df = test_df.drop('Survived', axis = 1)\n",
    "test_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.121883,
     "end_time": "2021-04-02T17:55:49.411662",
     "exception": false,
     "start_time": "2021-04-02T17:55:49.289779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data has now been fully transformed!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:49.655107Z",
     "iopub.status.busy": "2021-04-02T17:55:49.654462Z",
     "iopub.status.idle": "2021-04-02T17:55:49.663435Z",
     "shell.execute_reply": "2021-04-02T17:55:49.664219Z"
    },
    "papermill": {
     "duration": 0.132749,
     "end_time": "2021-04-02T17:55:49.664500",
     "exception": false,
     "start_time": "2021-04-02T17:55:49.531751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape:  (881, 13)\n",
      "Y_train shape:  (881,)\n",
      "X_test shape:  (418, 13)\n"
     ]
    }
   ],
   "source": [
    "# Time to split up data to prepare it for modelling\n",
    "\n",
    "X_train = train_df.drop('Survived', axis = 1)\n",
    "Y_train = train_df['Survived']\n",
    "X_test = test_df.drop('PassengerId', axis = 1).copy()\n",
    "print(\"X_train shape: \", X_train.shape)\n",
    "print(\"Y_train shape: \", Y_train.shape)\n",
    "print(\"X_test shape: \", X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:49.926602Z",
     "iopub.status.busy": "2021-04-02T17:55:49.925671Z",
     "iopub.status.idle": "2021-04-02T17:55:49.975537Z",
     "shell.execute_reply": "2021-04-02T17:55:49.976361Z"
    },
    "papermill": {
     "duration": 0.189,
     "end_time": "2021-04-02T17:55:49.976618",
     "exception": false,
     "start_time": "2021-04-02T17:55:49.787618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score for Logistic Regression: 80.93\n"
     ]
    }
   ],
   "source": [
    "# Logistic Regression model \n",
    "\n",
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train, Y_train)\n",
    "Y_pred = logreg.predict(X_test)\n",
    "acc_log = round(logreg.score(X_train, Y_train) * 100, 2)\n",
    "print('Accuracy score for Logistic Regression:', acc_log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:50.248513Z",
     "iopub.status.busy": "2021-04-02T17:55:50.247699Z",
     "iopub.status.idle": "2021-04-02T17:55:50.295071Z",
     "shell.execute_reply": "2021-04-02T17:55:50.296071Z"
    },
    "papermill": {
     "duration": 0.176875,
     "end_time": "2021-04-02T17:55:50.296351",
     "exception": false,
     "start_time": "2021-04-02T17:55:50.119476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score for SVM: 83.43\n"
     ]
    }
   ],
   "source": [
    "# Support Vector Machines model\n",
    "\n",
    "svc = SVC()\n",
    "svc.fit(X_train, Y_train)\n",
    "Y_pred = logreg.predict(X_test)\n",
    "acc_svc = round(svc.score(X_train, Y_train) * 100, 2)\n",
    "print('Accuracy score for SVM:', acc_svc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:50.554901Z",
     "iopub.status.busy": "2021-04-02T17:55:50.553977Z",
     "iopub.status.idle": "2021-04-02T17:55:50.623953Z",
     "shell.execute_reply": "2021-04-02T17:55:50.623336Z"
    },
    "papermill": {
     "duration": 0.205786,
     "end_time": "2021-04-02T17:55:50.624101",
     "exception": false,
     "start_time": "2021-04-02T17:55:50.418315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score for KNN: 84.22\n"
     ]
    }
   ],
   "source": [
    "# K-nearest neighbors model\n",
    "\n",
    "knn = KNeighborsClassifier(n_neighbors = 5)\n",
    "knn.fit(X_train, Y_train)\n",
    "Y_pred = knn.predict(X_test)\n",
    "acc_knn = round(knn.score(X_train, Y_train) * 100, 2)\n",
    "print('Accuracy score for KNN:', acc_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:50.876915Z",
     "iopub.status.busy": "2021-04-02T17:55:50.876081Z",
     "iopub.status.idle": "2021-04-02T17:55:50.911455Z",
     "shell.execute_reply": "2021-04-02T17:55:50.911952Z"
    },
    "papermill": {
     "duration": 0.165539,
     "end_time": "2021-04-02T17:55:50.912132",
     "exception": false,
     "start_time": "2021-04-02T17:55:50.746593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score for Linear SVC: 81.04\n"
     ]
    }
   ],
   "source": [
    "# Linear SVC model\n",
    "\n",
    "linear_svc = LinearSVC()\n",
    "linear_svc.fit(X_train, Y_train)\n",
    "Y_pred = linear_svc.predict(X_test)\n",
    "acc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\n",
    "print('Accuracy score for Linear SVC:', acc_linear_svc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:51.168564Z",
     "iopub.status.busy": "2021-04-02T17:55:51.165648Z",
     "iopub.status.idle": "2021-04-02T17:55:51.179782Z",
     "shell.execute_reply": "2021-04-02T17:55:51.180327Z"
    },
    "papermill": {
     "duration": 0.144649,
     "end_time": "2021-04-02T17:55:51.180514",
     "exception": false,
     "start_time": "2021-04-02T17:55:51.035865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score for SGD: 81.04\n"
     ]
    }
   ],
   "source": [
    "# Stochastic Gradient Descent model\n",
    "\n",
    "sgd = SGDClassifier()\n",
    "sgd.fit(X_train, Y_train)\n",
    "Y_pred = sgd.predict(X_test)\n",
    "acc_sgd = round(linear_svc.score(X_train, Y_train) * 100, 2)\n",
    "print('Accuracy score for SGD:', acc_sgd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:51.438004Z",
     "iopub.status.busy": "2021-04-02T17:55:51.433143Z",
     "iopub.status.idle": "2021-04-02T17:55:51.443944Z",
     "shell.execute_reply": "2021-04-02T17:55:51.443264Z"
    },
    "papermill": {
     "duration": 0.140605,
     "end_time": "2021-04-02T17:55:51.444096",
     "exception": false,
     "start_time": "2021-04-02T17:55:51.303491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score for GNB: 78.89\n"
     ]
    }
   ],
   "source": [
    "# Gaussian Naive Bayes model\n",
    "\n",
    "gaussian = GaussianNB()\n",
    "gaussian.fit(X_train, Y_train)\n",
    "Y_pred = gaussian.predict(X_test)\n",
    "acc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\n",
    "print('Accuracy score for GNB:', acc_gaussian)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:51.699219Z",
     "iopub.status.busy": "2021-04-02T17:55:51.698556Z",
     "iopub.status.idle": "2021-04-02T17:55:51.710744Z",
     "shell.execute_reply": "2021-04-02T17:55:51.711629Z"
    },
    "papermill": {
     "duration": 0.145119,
     "end_time": "2021-04-02T17:55:51.711927",
     "exception": false,
     "start_time": "2021-04-02T17:55:51.566808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score for Decision Tree Classifier: 85.7\n"
     ]
    }
   ],
   "source": [
    "# Decision tree classifier model\n",
    "\n",
    "decision_tree = DecisionTreeClassifier()\n",
    "decision_tree.fit(X_train, Y_train)\n",
    "Y_pred = decision_tree.predict(X_test)\n",
    "acc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\n",
    "print('Accuracy score for Decision Tree Classifier:', acc_decision_tree)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:51.968223Z",
     "iopub.status.busy": "2021-04-02T17:55:51.967521Z",
     "iopub.status.idle": "2021-04-02T17:55:52.224117Z",
     "shell.execute_reply": "2021-04-02T17:55:52.223599Z"
    },
    "papermill": {
     "duration": 0.388053,
     "end_time": "2021-04-02T17:55:52.224287",
     "exception": false,
     "start_time": "2021-04-02T17:55:51.836234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score for Random Forest Classifier: 85.7\n"
     ]
    }
   ],
   "source": [
    "# Random forest classifier model\n",
    "\n",
    "random_forest = RandomForestClassifier(n_estimators = 100)\n",
    "random_forest.fit(X_train, Y_train)\n",
    "Y_pred = random_forest.predict(X_test)\n",
    "acc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\n",
    "print('Accuracy score for Random Forest Classifier:', acc_random_forest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:52.487440Z",
     "iopub.status.busy": "2021-04-02T17:55:52.486534Z",
     "iopub.status.idle": "2021-04-02T17:55:52.490517Z",
     "shell.execute_reply": "2021-04-02T17:55:52.491199Z"
    },
    "papermill": {
     "duration": 0.142156,
     "end_time": "2021-04-02T17:55:52.491400",
     "exception": false,
     "start_time": "2021-04-02T17:55:52.349244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>85.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>85.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>KNN</td>\n",
       "      <td>84.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Support Vector Machines</td>\n",
       "      <td>83.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Stochastic Gradient Decent</td>\n",
       "      <td>81.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Linear SVC</td>\n",
       "      <td>81.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>80.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Naive Bayes</td>\n",
       "      <td>78.89</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Model  Score\n",
       "0               Random Forest  85.70\n",
       "1               Decision Tree  85.70\n",
       "2                         KNN  84.22\n",
       "3     Support Vector Machines  83.43\n",
       "4  Stochastic Gradient Decent  81.04\n",
       "5                  Linear SVC  81.04\n",
       "6         Logistic Regression  80.93\n",
       "7                 Naive Bayes  78.89"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compare training accuracy of the various models that I fit\n",
    "\n",
    "models = pd.DataFrame({'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n",
    "                                 'Random Forest', 'Naive Bayes', 'Stochastic Gradient Decent', \n",
    "                                 'Linear SVC', 'Decision Tree'],\n",
    "                       'Score': [acc_svc, acc_knn, acc_log, acc_random_forest, acc_gaussian,\n",
    "                                 acc_sgd, acc_linear_svc, acc_decision_tree]})\n",
    "\n",
    "models.sort_values(by = 'Score', ascending = False, ignore_index = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.124421,
     "end_time": "2021-04-02T17:55:52.741479",
     "exception": false,
     "start_time": "2021-04-02T17:55:52.617058",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Time to begin the K Fold Cross Validation process to more accurately compare the models!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:53.000513Z",
     "iopub.status.busy": "2021-04-02T17:55:52.999682Z",
     "iopub.status.idle": "2021-04-02T17:55:53.003468Z",
     "shell.execute_reply": "2021-04-02T17:55:53.003999Z"
    },
    "papermill": {
     "duration": 0.137283,
     "end_time": "2021-04-02T17:55:53.004167",
     "exception": false,
     "start_time": "2021-04-02T17:55:52.866884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a list of all the classifiers\n",
    "\n",
    "classifiers = []\n",
    "classifiers.append(LogisticRegression())\n",
    "classifiers.append(SVC())\n",
    "classifiers.append(KNeighborsClassifier(n_neighbors = 5))\n",
    "classifiers.append(LinearSVC())\n",
    "classifiers.append(SGDClassifier())\n",
    "classifiers.append(DecisionTreeClassifier())\n",
    "classifiers.append(RandomForestClassifier())\n",
    "classifiers.append(GaussianNB())\n",
    "\n",
    "len(classifiers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:53.265317Z",
     "iopub.status.busy": "2021-04-02T17:55:53.264579Z",
     "iopub.status.idle": "2021-04-02T17:55:55.927546Z",
     "shell.execute_reply": "2021-04-02T17:55:55.928053Z"
    },
    "papermill": {
     "duration": 2.795596,
     "end_time": "2021-04-02T17:55:55.928249",
     "exception": false,
     "start_time": "2021-04-02T17:55:53.132653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Prepare new list with cross validation results of each classifier\n",
    "\n",
    "cv_results = []\n",
    "for classifier in classifiers:\n",
    "    cv_results.append(cross_val_score(classifier, X_train, Y_train, scoring = 'accuracy', cv = 8))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:56.187119Z",
     "iopub.status.busy": "2021-04-02T17:55:56.186449Z",
     "iopub.status.idle": "2021-04-02T17:55:56.191730Z",
     "shell.execute_reply": "2021-04-02T17:55:56.192190Z"
    },
    "papermill": {
     "duration": 0.134563,
     "end_time": "2021-04-02T17:55:56.192385",
     "exception": false,
     "start_time": "2021-04-02T17:55:56.057822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Calculate mean and standard deviation of cross validation results for each classifier\n",
    "\n",
    "cv_mean = []\n",
    "cv_std = []\n",
    "for cv_result in cv_results:\n",
    "    cv_mean.append(cv_result.mean())\n",
    "    cv_std.append(cv_result.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:56.456113Z",
     "iopub.status.busy": "2021-04-02T17:55:56.455125Z",
     "iopub.status.idle": "2021-04-02T17:55:56.459673Z",
     "shell.execute_reply": "2021-04-02T17:55:56.459058Z"
    },
    "papermill": {
     "duration": 0.142136,
     "end_time": "2021-04-02T17:55:56.459821",
     "exception": false,
     "start_time": "2021-04-02T17:55:56.317685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cross Validation Mean</th>\n",
       "      <th>Cross Validation Std</th>\n",
       "      <th>Algorithm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.824079</td>\n",
       "      <td>0.032348</td>\n",
       "      <td>Support Vector Machines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.818448</td>\n",
       "      <td>0.042548</td>\n",
       "      <td>KNN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.809347</td>\n",
       "      <td>0.036113</td>\n",
       "      <td>Random Forest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.800256</td>\n",
       "      <td>0.022884</td>\n",
       "      <td>Logistic Regression</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.799109</td>\n",
       "      <td>0.029825</td>\n",
       "      <td>Linear SVC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.793438</td>\n",
       "      <td>0.025819</td>\n",
       "      <td>Decision Tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.785493</td>\n",
       "      <td>0.026662</td>\n",
       "      <td>Gausian Naive Bayes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.755989</td>\n",
       "      <td>0.040305</td>\n",
       "      <td>Stochastic Gradient Descent</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cross Validation Mean  Cross Validation Std                    Algorithm\n",
       "0               0.824079              0.032348      Support Vector Machines\n",
       "1               0.818448              0.042548                          KNN\n",
       "2               0.809347              0.036113                Random Forest\n",
       "3               0.800256              0.022884          Logistic Regression\n",
       "4               0.799109              0.029825                   Linear SVC\n",
       "5               0.793438              0.025819                Decision Tree\n",
       "6               0.785493              0.026662          Gausian Naive Bayes\n",
       "7               0.755989              0.040305  Stochastic Gradient Descent"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create dataframe to view/compare CV results\n",
    "\n",
    "cv_res = pd.DataFrame({'Cross Validation Mean': cv_mean, 'Cross Validation Std': cv_std, 'Algorithm': ['Logistic Regression', 'Support Vector Machines', 'KNN', 'Linear SVC', 'Stochastic Gradient Descent', 'Decision Tree', 'Random Forest', 'Gausian Naive Bayes']})\n",
    "cv_res.sort_values(by = 'Cross Validation Mean', ascending = False, ignore_index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:56.741868Z",
     "iopub.status.busy": "2021-04-02T17:55:56.739637Z",
     "iopub.status.idle": "2021-04-02T17:55:56.927708Z",
     "shell.execute_reply": "2021-04-02T17:55:56.927141Z"
    },
    "papermill": {
     "duration": 0.342745,
     "end_time": "2021-04-02T17:55:56.927863",
     "exception": false,
     "start_time": "2021-04-02T17:55:56.585118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Cross Validation Scores')"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize CV dataframe using barplots\n",
    "\n",
    "sns.barplot('Cross Validation Mean', 'Algorithm', data = cv_res, order = cv_res.sort_values(by = 'Cross Validation Mean', ascending = False)['Algorithm'], palette = 'Set3', **{'xerr': cv_std})\n",
    "plt.ylabel('Algorithm')\n",
    "plt.title('Cross Validation Scores')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.128262,
     "end_time": "2021-04-02T17:55:57.186114",
     "exception": false,
     "start_time": "2021-04-02T17:55:57.057852",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Support Vector Machines will be the chosen model as it performed the best on average**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:55:57.450678Z",
     "iopub.status.busy": "2021-04-02T17:55:57.449952Z",
     "iopub.status.idle": "2021-04-02T17:56:01.899897Z",
     "shell.execute_reply": "2021-04-02T17:56:01.900426Z"
    },
    "papermill": {
     "duration": 4.586141,
     "end_time": "2021-04-02T17:56:01.900608",
     "exception": false,
     "start_time": "2021-04-02T17:55:57.314467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 25 candidates, totalling 125 fits\n",
      "[CV] C=0.1, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.814, total=   0.0s\n",
      "[CV] C=0.1, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.824, total=   0.0s\n",
      "[CV] C=0.1, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.824, total=   0.0s\n",
      "[CV] C=0.1, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.767, total=   0.0s\n",
      "[CV] C=0.1, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=0.1, gamma=1, kernel=rbf, score=0.830, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.819, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
      "[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.1s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.795, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.750, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=0.1, gamma=0.1, kernel=rbf, score=0.801, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.689, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.716, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.625, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.631, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=0.1, gamma=0.01, kernel=rbf, score=0.619, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.616, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=0.1, gamma=0.001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.616, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=0.1, gamma=0.0001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=1, gamma=1, kernel=rbf ........................................\n",
      "[CV] ............ C=1, gamma=1, kernel=rbf, score=0.780, total=   0.0s\n",
      "[CV] C=1, gamma=1, kernel=rbf ........................................\n",
      "[CV] ............ C=1, gamma=1, kernel=rbf, score=0.824, total=   0.0s\n",
      "[CV] C=1, gamma=1, kernel=rbf ........................................\n",
      "[CV] ............ C=1, gamma=1, kernel=rbf, score=0.807, total=   0.0s\n",
      "[CV] C=1, gamma=1, kernel=rbf ........................................\n",
      "[CV] ............ C=1, gamma=1, kernel=rbf, score=0.773, total=   0.0s\n",
      "[CV] C=1, gamma=1, kernel=rbf ........................................\n",
      "[CV] ............ C=1, gamma=1, kernel=rbf, score=0.847, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.847, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.824, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.778, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] .......... C=1, gamma=0.1, kernel=rbf, score=0.847, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.802, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.812, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.784, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.750, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ......... C=1, gamma=0.01, kernel=rbf, score=0.795, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.695, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.739, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.659, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.653, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ........ C=1, gamma=0.001, kernel=rbf, score=0.636, total=   0.0s\n",
      "[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n",
      "[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.616, total=   0.0s\n",
      "[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n",
      "[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n",
      "[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n",
      "[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=1, gamma=0.0001, kernel=rbf ...................................\n",
      "[CV] ....... C=1, gamma=0.0001, kernel=rbf, score=0.614, total=   0.0s\n",
      "[CV] C=10, gamma=1, kernel=rbf .......................................\n",
      "[CV] ........... C=10, gamma=1, kernel=rbf, score=0.780, total=   0.0s\n",
      "[CV] C=10, gamma=1, kernel=rbf .......................................\n",
      "[CV] ........... C=10, gamma=1, kernel=rbf, score=0.790, total=   0.0s\n",
      "[CV] C=10, gamma=1, kernel=rbf .......................................\n",
      "[CV] ........... C=10, gamma=1, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=10, gamma=1, kernel=rbf .......................................\n",
      "[CV] ........... C=10, gamma=1, kernel=rbf, score=0.784, total=   0.0s\n",
      "[CV] C=10, gamma=1, kernel=rbf .......................................\n",
      "[CV] ........... C=10, gamma=1, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.825, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.830, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.830, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.790, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ......... C=10, gamma=0.1, kernel=rbf, score=0.852, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.802, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.807, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.790, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.756, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ........ C=10, gamma=0.01, kernel=rbf, score=0.830, total=   0.0s\n",
      "[CV] C=10, gamma=0.001, kernel=rbf ...................................\n",
      "[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.802, total=   0.0s\n",
      "[CV] C=10, gamma=0.001, kernel=rbf ...................................\n",
      "[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.807, total=   0.0s\n",
      "[CV] C=10, gamma=0.001, kernel=rbf ...................................\n",
      "[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.784, total=   0.0s\n",
      "[CV] C=10, gamma=0.001, kernel=rbf ...................................\n",
      "[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.750, total=   0.0s\n",
      "[CV] C=10, gamma=0.001, kernel=rbf ...................................\n",
      "[CV] ....... C=10, gamma=0.001, kernel=rbf, score=0.795, total=   0.0s\n",
      "[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n",
      "[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.695, total=   0.0s\n",
      "[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n",
      "[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.739, total=   0.0s\n",
      "[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n",
      "[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.676, total=   0.0s\n",
      "[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n",
      "[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.653, total=   0.0s\n",
      "[CV] C=10, gamma=0.0001, kernel=rbf ..................................\n",
      "[CV] ...... C=10, gamma=0.0001, kernel=rbf, score=0.636, total=   0.0s\n",
      "[CV] C=100, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=100, gamma=1, kernel=rbf, score=0.780, total=   0.0s\n",
      "[CV] C=100, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=100, gamma=1, kernel=rbf, score=0.790, total=   0.0s\n",
      "[CV] C=100, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=100, gamma=1, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=100, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=100, gamma=1, kernel=rbf, score=0.784, total=   0.0s\n",
      "[CV] C=100, gamma=1, kernel=rbf ......................................\n",
      "[CV] .......... C=100, gamma=1, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.774, total=   0.1s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.824, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.824, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.767, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ........ C=100, gamma=0.1, kernel=rbf, score=0.852, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.842, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.824, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.795, total=   0.1s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] ....... C=100, gamma=0.01, kernel=rbf, score=0.869, total=   0.0s\n",
      "[CV] C=100, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.802, total=   0.0s\n",
      "[CV] C=100, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.807, total=   0.0s\n",
      "[CV] C=100, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.790, total=   0.0s\n",
      "[CV] C=100, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.750, total=   0.0s\n",
      "[CV] C=100, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ...... C=100, gamma=0.001, kernel=rbf, score=0.830, total=   0.0s\n",
      "[CV] C=100, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.802, total=   0.0s\n",
      "[CV] C=100, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.807, total=   0.0s\n",
      "[CV] C=100, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.784, total=   0.0s\n",
      "[CV] C=100, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.750, total=   0.0s\n",
      "[CV] C=100, gamma=0.0001, kernel=rbf .................................\n",
      "[CV] ..... C=100, gamma=0.0001, kernel=rbf, score=0.795, total=   0.0s\n",
      "[CV] C=1000, gamma=1, kernel=rbf .....................................\n",
      "[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.780, total=   0.0s\n",
      "[CV] C=1000, gamma=1, kernel=rbf .....................................\n",
      "[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.790, total=   0.0s\n",
      "[CV] C=1000, gamma=1, kernel=rbf .....................................\n",
      "[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=1000, gamma=1, kernel=rbf .....................................\n",
      "[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.784, total=   0.0s\n",
      "[CV] C=1000, gamma=1, kernel=rbf .....................................\n",
      "[CV] ......... C=1000, gamma=1, kernel=rbf, score=0.818, total=   0.0s\n",
      "[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n",
      "[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.780, total=   0.1s\n",
      "[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n",
      "[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.790, total=   0.1s\n",
      "[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n",
      "[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.795, total=   0.1s\n",
      "[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n",
      "[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.778, total=   0.1s\n",
      "[CV] C=1000, gamma=0.1, kernel=rbf ...................................\n",
      "[CV] ....... C=1000, gamma=0.1, kernel=rbf, score=0.812, total=   0.1s\n",
      "[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n",
      "[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.819, total=   0.1s\n",
      "[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n",
      "[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.830, total=   0.1s\n",
      "[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n",
      "[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.824, total=   0.1s\n",
      "[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n",
      "[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.790, total=   0.1s\n",
      "[CV] C=1000, gamma=0.01, kernel=rbf ..................................\n",
      "[CV] ...... C=1000, gamma=0.01, kernel=rbf, score=0.858, total=   0.1s\n",
      "[CV] C=1000, gamma=0.001, kernel=rbf .................................\n",
      "[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.802, total=   0.0s\n",
      "[CV] C=1000, gamma=0.001, kernel=rbf .................................\n",
      "[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.807, total=   0.0s\n",
      "[CV] C=1000, gamma=0.001, kernel=rbf .................................\n",
      "[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.790, total=   0.0s\n",
      "[CV] C=1000, gamma=0.001, kernel=rbf .................................\n",
      "[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.756, total=   0.1s\n",
      "[CV] C=1000, gamma=0.001, kernel=rbf .................................\n",
      "[CV] ..... C=1000, gamma=0.001, kernel=rbf, score=0.824, total=   0.1s\n",
      "[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n",
      "[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.802, total=   0.0s\n",
      "[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n",
      "[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.807, total=   0.0s\n",
      "[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n",
      "[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.790, total=   0.0s\n",
      "[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n",
      "[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.750, total=   0.1s\n",
      "[CV] C=1000, gamma=0.0001, kernel=rbf ................................\n",
      "[CV] .... C=1000, gamma=0.0001, kernel=rbf, score=0.830, total=   0.1s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 125 out of 125 | elapsed:    4.4s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=SVC(),\n",
       "             param_grid={'C': [0.1, 1, 10, 100, 1000],\n",
       "                         'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n",
       "                         'kernel': ['rbf']},\n",
       "             verbose=3)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use GridSearchCV to determine best hyperparameters\n",
    "\n",
    "param_grid = {'C': [0.1, 1, 10, 100, 1000],  \n",
    "              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n",
    "              'kernel': ['rbf']}  \n",
    "  \n",
    "grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3) \n",
    "\n",
    "grid.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:56:02.180587Z",
     "iopub.status.busy": "2021-04-02T17:56:02.179843Z",
     "iopub.status.idle": "2021-04-02T17:56:02.184414Z",
     "shell.execute_reply": "2021-04-02T17:56:02.183903Z"
    },
    "papermill": {
     "duration": 0.148234,
     "end_time": "2021-04-02T17:56:02.184559",
     "exception": false,
     "start_time": "2021-04-02T17:56:02.036325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters:  {'C': 100, 'gamma': 0.01, 'kernel': 'rbf'}\n",
      "Best estimator:  SVC(C=100, gamma=0.01)\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters: \", grid.best_params_) \n",
    "print(\"Best estimator: \", grid.best_estimator_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:56:02.463104Z",
     "iopub.status.busy": "2021-04-02T17:56:02.462128Z",
     "iopub.status.idle": "2021-04-02T17:56:02.533939Z",
     "shell.execute_reply": "2021-04-02T17:56:02.533237Z"
    },
    "papermill": {
     "duration": 0.214846,
     "end_time": "2021-04-02T17:56:02.534084",
     "exception": false,
     "start_time": "2021-04-02T17:56:02.319238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated Accuracy Score of SVM: 83.09\n"
     ]
    }
   ],
   "source": [
    "# Perform hyperparameter tuning on model\n",
    "\n",
    "svc = SVC(C = 100, gamma = 0.01, kernel = 'rbf')\n",
    "svc.fit(X_train, Y_train)\n",
    "Y_pred = svc.predict(X_test)\n",
    "acc_svc = round(svc.score(X_train, Y_train) * 100, 2)\n",
    "print('Updated Accuracy Score of SVM:', acc_svc)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:56:02.810766Z",
     "iopub.status.busy": "2021-04-02T17:56:02.810005Z",
     "iopub.status.idle": "2021-04-02T17:56:03.196101Z",
     "shell.execute_reply": "2021-04-02T17:56:03.195575Z"
    },
    "papermill": {
     "duration": 0.526715,
     "end_time": "2021-04-02T17:56:03.196311",
     "exception": false,
     "start_time": "2021-04-02T17:56:02.669596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8286006128702758"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate average cross validation score\n",
    "\n",
    "cross_val_score(svc, X_train, Y_train, scoring = 'accuracy', cv = 10).mean()\n",
    "\n",
    "# slight improvement from prior model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:56:03.475221Z",
     "iopub.status.busy": "2021-04-02T17:56:03.474477Z",
     "iopub.status.idle": "2021-04-02T17:56:03.478419Z",
     "shell.execute_reply": "2021-04-02T17:56:03.477874Z"
    },
    "papermill": {
     "duration": 0.145194,
     "end_time": "2021-04-02T17:56:03.478560",
     "exception": false,
     "start_time": "2021-04-02T17:56:03.333366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418, 2)"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gender_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:56:03.758969Z",
     "iopub.status.busy": "2021-04-02T17:56:03.758254Z",
     "iopub.status.idle": "2021-04-02T17:56:03.761450Z",
     "shell.execute_reply": "2021-04-02T17:56:03.761936Z"
    },
    "papermill": {
     "duration": 0.145681,
     "end_time": "2021-04-02T17:56:03.762107",
     "exception": false,
     "start_time": "2021-04-02T17:56:03.616426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418, 2)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create dataframe for submission in the correct format (418 rows, 2 columns)\n",
    "\n",
    "submission = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Survived': Y_pred})\n",
    "submission.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:56:04.046936Z",
     "iopub.status.busy": "2021-04-02T17:56:04.045884Z",
     "iopub.status.idle": "2021-04-02T17:56:04.050470Z",
     "shell.execute_reply": "2021-04-02T17:56:04.049929Z"
    },
    "papermill": {
     "duration": 0.150518,
     "end_time": "2021-04-02T17:56:04.050620",
     "exception": false,
     "start_time": "2021-04-02T17:56:03.900102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>893</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>883</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived\n",
       "881          892         0\n",
       "882          893         1\n",
       "883          894         0\n",
       "884          895         0\n",
       "885          896         1"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-04-02T17:56:04.330768Z",
     "iopub.status.busy": "2021-04-02T17:56:04.330133Z",
     "iopub.status.idle": "2021-04-02T17:56:04.337742Z",
     "shell.execute_reply": "2021-04-02T17:56:04.337068Z"
    },
    "papermill": {
     "duration": 0.148786,
     "end_time": "2021-04-02T17:56:04.337887",
     "exception": false,
     "start_time": "2021-04-02T17:56:04.189101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save dataframe to CSV file for submission\n",
    "\n",
    "submission.to_csv('/kaggle/working/submission.csv', index = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.137092,
     "end_time": "2021-04-02T17:56:04.611808",
     "exception": false,
     "start_time": "2021-04-02T17:56:04.474716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.137956,
     "end_time": "2021-04-02T17:56:04.886946",
     "exception": false,
     "start_time": "2021-04-02T17:56:04.748990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.137861,
     "end_time": "2021-04-02T17:56:05.162784",
     "exception": false,
     "start_time": "2021-04-02T17:56:05.024923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.136881,
     "end_time": "2021-04-02T17:56:05.437353",
     "exception": false,
     "start_time": "2021-04-02T17:56:05.300472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.139011,
     "end_time": "2021-04-02T17:56:05.713854",
     "exception": false,
     "start_time": "2021-04-02T17:56:05.574843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 48.771392,
   "end_time": "2021-04-02T17:56:06.663336",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-04-02T17:55:17.891944",
   "version": "2.2.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
